
usbtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000782c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a50  08007a50  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a50  08007a50  00017a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a58  08007a58  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a58  08007a58  00017a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08007a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a64  2000012c  08007b8c  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b90  08007b8c  00020b90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c32  00000000  00000000  0002019f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cfe  00000000  00000000  00030dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  00033ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a34  00000000  00000000  00034848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023766  00000000  00000000  0003527c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012694  00000000  00000000  000589e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbc96  00000000  00000000  0006b076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036dc  00000000  00000000  00136d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0013a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000012c 	.word	0x2000012c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080079d8 	.word	0x080079d8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000130 	.word	0x20000130
 8000200:	080079d8 	.word	0x080079d8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fa34 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f808 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f89c 	bl	8000648 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000510:	f000 f870 	bl	80005f4 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000514:	f006 fd78 	bl	8007008 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x18>
	...

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 031c 	add.w	r3, r7, #28
 8000526:	2234      	movs	r2, #52	; 0x34
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f007 fa28 	bl	8007980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b29      	ldr	r3, [pc, #164]	; (80005ec <SystemClock_Config+0xd0>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a28      	ldr	r2, [pc, #160]	; (80005ec <SystemClock_Config+0xd0>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b26      	ldr	r3, [pc, #152]	; (80005ec <SystemClock_Config+0xd0>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <SystemClock_Config+0xd4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a22      	ldr	r2, [pc, #136]	; (80005f0 <SystemClock_Config+0xd4>)
 8000566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <SystemClock_Config+0xd4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800057c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000580:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800058c:	2304      	movs	r3, #4
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000590:	23a8      	movs	r3, #168	; 0xa8
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000598:	2307      	movs	r3, #7
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800059c:	2302      	movs	r3, #2
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 031c 	add.w	r3, r7, #28
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fe5d 	bl	8003264 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005b0:	f000 f8f8 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2105      	movs	r1, #5
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 ffd2 	bl	800257c <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005de:	f000 f8e1 	bl	80007a4 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_USART3_UART_Init+0x50>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000604:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_USART3_UART_Init+0x4c>)
 800062c:	f003 f8b8 	bl	80037a0 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000636:	f000 f8b5 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000148 	.word	0x20000148
 8000644:	40004800 	.word	0x40004800

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08c      	sub	sp, #48	; 0x30
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	61bb      	str	r3, [r7, #24]
 8000662:	4b4c      	ldr	r3, [pc, #304]	; (8000794 <MX_GPIO_Init+0x14c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a4b      	ldr	r2, [pc, #300]	; (8000794 <MX_GPIO_Init+0x14c>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b49      	ldr	r3, [pc, #292]	; (8000794 <MX_GPIO_Init+0x14c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	4b45      	ldr	r3, [pc, #276]	; (8000794 <MX_GPIO_Init+0x14c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a44      	ldr	r2, [pc, #272]	; (8000794 <MX_GPIO_Init+0x14c>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b42      	ldr	r3, [pc, #264]	; (8000794 <MX_GPIO_Init+0x14c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <MX_GPIO_Init+0x14c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a3d      	ldr	r2, [pc, #244]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b37      	ldr	r3, [pc, #220]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a36      	ldr	r2, [pc, #216]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0308 	and.w	r3, r3, #8
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	4b30      	ldr	r3, [pc, #192]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a2f      	ldr	r2, [pc, #188]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a28      	ldr	r2, [pc, #160]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f244 0181 	movw	r1, #16513	; 0x4081
 800070c:	4822      	ldr	r0, [pc, #136]	; (8000798 <MX_GPIO_Init+0x150>)
 800070e:	f000 fc6b 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	4821      	ldr	r0, [pc, #132]	; (800079c <MX_GPIO_Init+0x154>)
 8000718:	f000 fc66 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800071c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000722:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	481b      	ldr	r0, [pc, #108]	; (80007a0 <MX_GPIO_Init+0x158>)
 8000734:	f000 fac4 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000738:	f244 0381 	movw	r3, #16513	; 0x4081
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4811      	ldr	r0, [pc, #68]	; (8000798 <MX_GPIO_Init+0x150>)
 8000752:	f000 fab5 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000756:	2340      	movs	r3, #64	; 0x40
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <MX_GPIO_Init+0x154>)
 800076e:	f000 faa7 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_GPIO_Init+0x154>)
 8000786:	f000 fa9b 	bl	8000cc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078a:	bf00      	nop
 800078c:	3730      	adds	r7, #48	; 0x30
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40020400 	.word	0x40020400
 800079c:	40021800 	.word	0x40021800
 80007a0:	40020800 	.word	0x40020800

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <HAL_MspInit+0x4c>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	; 0x44
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x4c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a19      	ldr	r2, [pc, #100]	; (8000884 <HAL_UART_MspInit+0x84>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d12c      	bne.n	800087c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <HAL_UART_MspInit+0x88>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <HAL_UART_MspInit+0x88>)
 800082c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_UART_MspInit+0x88>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <HAL_UART_MspInit+0x88>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a10      	ldr	r2, [pc, #64]	; (8000888 <HAL_UART_MspInit+0x88>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_UART_MspInit+0x88>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800085a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800085e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800086c:	2307      	movs	r3, #7
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <HAL_UART_MspInit+0x8c>)
 8000878:	f000 fa22 	bl	8000cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40004800 	.word	0x40004800
 8000888:	40023800 	.word	0x40023800
 800088c:	40020c00 	.word	0x40020c00

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f89a 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <OTG_FS_IRQHandler+0x10>)
 80008ea:	f000 fced 	bl	80012c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000670 	.word	0x20000670

080008f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <SystemInit+0x20>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <SystemInit+0x20>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800091c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000922:	490e      	ldr	r1, [pc, #56]	; (800095c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000938:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000946:	f7ff ffd7 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f007 f821 	bl	8007990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094e:	f7ff fdd7 	bl	8000500 <main>
  bx  lr    
 8000952:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8000960:	08007a60 	.word	0x08007a60
  ldr r2, =_sbss
 8000964:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8000968:	20000b90 	.word	0x20000b90

0800096c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <HAL_Init+0x40>)
 800097a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_Init+0x40>)
 8000986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x40>)
 8000992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f94f 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff ff04 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023c00 	.word	0x40023c00

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f967 	bl	8000ca6 <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f000 f92f 	bl	8000c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	2000018c 	.word	0x2000018c

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000018c 	.word	0x2000018c

08000a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff ffee 	bl	8000a3c <HAL_GetTick>
 8000a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Delay+0x44>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ffde 	bl	8000a3c <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <__NVIC_EnableIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c08:	d301      	bcc.n	8000c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00f      	b.n	8000c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <SysTick_Config+0x40>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c16:	210f      	movs	r1, #15
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f7ff ff8e 	bl	8000b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SysTick_Config+0x40>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <SysTick_Config+0x40>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	e000e010 	.word	0xe000e010

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff29 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff3e 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ff8e 	bl	8000b90 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff5d 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff31 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffa2 	bl	8000bf8 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	e165      	b.n	8000fa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f040 8154 	bne.w	8000fa2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d005      	beq.n	8000d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d130      	bne.n	8000d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	f003 0201 	and.w	r2, r3, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d017      	beq.n	8000db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d123      	bne.n	8000e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0203 	and.w	r2, r3, #3
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80ae 	beq.w	8000fa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b5d      	ldr	r3, [pc, #372]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a5c      	ldr	r2, [pc, #368]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b5a      	ldr	r3, [pc, #360]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e62:	4a58      	ldr	r2, [pc, #352]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <HAL_GPIO_Init+0x308>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d025      	beq.n	8000eda <HAL_GPIO_Init+0x21a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4e      	ldr	r2, [pc, #312]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d01f      	beq.n	8000ed6 <HAL_GPIO_Init+0x216>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4d      	ldr	r2, [pc, #308]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d019      	beq.n	8000ed2 <HAL_GPIO_Init+0x212>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4c      	ldr	r2, [pc, #304]	; (8000fd4 <HAL_GPIO_Init+0x314>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x20e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4b      	ldr	r2, [pc, #300]	; (8000fd8 <HAL_GPIO_Init+0x318>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x20a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4a      	ldr	r2, [pc, #296]	; (8000fdc <HAL_GPIO_Init+0x31c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a49      	ldr	r2, [pc, #292]	; (8000fe0 <HAL_GPIO_Init+0x320>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x202>
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	e00c      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	e00a      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	e008      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000eca:	2304      	movs	r3, #4
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000eda:	2300      	movs	r3, #0
 8000edc:	69fa      	ldr	r2, [r7, #28]
 8000ede:	f002 0203 	and.w	r2, r2, #3
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eec:	4935      	ldr	r1, [pc, #212]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efa:	4b3a      	ldr	r3, [pc, #232]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1e:	4a31      	ldr	r2, [pc, #196]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f24:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f48:	4a26      	ldr	r2, [pc, #152]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f4e:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f9c:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	f67f ae96 	bls.w	8000cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40013800 	.word	0x40013800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40021400 	.word	0x40021400
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	40013c00 	.word	0x40013c00

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001004:	e003      	b.n	800100e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	041a      	lsls	r2, r3, #16
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	619a      	str	r2, [r3, #24]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800101a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101c:	b08f      	sub	sp, #60	; 0x3c
 800101e:	af0a      	add	r7, sp, #40	; 0x28
 8001020:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e116      	b.n	800125a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d106      	bne.n	800104c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f006 f926 	bl	8007298 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2203      	movs	r2, #3
 8001050:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f002 ff6f 	bl	8003f4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	687e      	ldr	r6, [r7, #4]
 8001078:	466d      	mov	r5, sp
 800107a:	f106 0410 	add.w	r4, r6, #16
 800107e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001086:	e894 0003 	ldmia.w	r4, {r0, r1}
 800108a:	e885 0003 	stmia.w	r5, {r0, r1}
 800108e:	1d33      	adds	r3, r6, #4
 8001090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001092:	6838      	ldr	r0, [r7, #0]
 8001094:	f002 fe46 	bl	8003d24 <USB_CoreInit>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2202      	movs	r2, #2
 80010a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e0d7      	b.n	800125a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 ff5d 	bl	8003f70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	e04a      	b.n	8001152 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	333d      	adds	r3, #61	; 0x3d
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	333c      	adds	r3, #60	; 0x3c
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	b298      	uxth	r0, r3
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4413      	add	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	3344      	adds	r3, #68	; 0x44
 80010f8:	4602      	mov	r2, r0
 80010fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	3340      	adds	r3, #64	; 0x40
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	3348      	adds	r3, #72	; 0x48
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	334c      	adds	r3, #76	; 0x4c
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	3354      	adds	r3, #84	; 0x54
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	3301      	adds	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	d3af      	bcc.n	80010bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	e044      	b.n	80011ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	3301      	adds	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3b5      	bcc.n	8001162 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	687e      	ldr	r6, [r7, #4]
 80011fe:	466d      	mov	r5, sp
 8001200:	f106 0410 	add.w	r4, r6, #16
 8001204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001210:	e885 0003 	stmia.w	r5, {r0, r1}
 8001214:	1d33      	adds	r3, r6, #4
 8001216:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001218:	6838      	ldr	r0, [r7, #0]
 800121a:	f002 fef5 	bl	8004008 <USB_DevInit>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2202      	movs	r2, #2
 8001228:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e014      	b.n	800125a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f001 f973 	bl	8002534 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f004 f837 	bl	80052c6 <USB_DevDisconnect>

  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001262 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001276:	2b01      	cmp	r3, #1
 8001278:	d101      	bne.n	800127e <HAL_PCD_Start+0x1c>
 800127a:	2302      	movs	r3, #2
 800127c:	e020      	b.n	80012c0 <HAL_PCD_Start+0x5e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	2b01      	cmp	r3, #1
 800128c:	d109      	bne.n	80012a2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001292:	2b01      	cmp	r3, #1
 8001294:	d005      	beq.n	80012a2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 fe40 	bl	8003f2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 ffe7 	bl	8005284 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b08d      	sub	sp, #52	; 0x34
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f004 f8a5 	bl	800542e <USB_GetMode>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 84b7 	bne.w	8001c5a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 f809 	bl	8005308 <USB_ReadInterrupts>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 84ad 	beq.w	8001c58 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f003 fff6 	bl	8005308 <USB_ReadInterrupts>
 800131c:	4603      	mov	r3, r0
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b02      	cmp	r3, #2
 8001324:	d107      	bne.n	8001336 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	695a      	ldr	r2, [r3, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f002 0202 	and.w	r2, r2, #2
 8001334:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f003 ffe4 	bl	8005308 <USB_ReadInterrupts>
 8001340:	4603      	mov	r3, r0
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	2b10      	cmp	r3, #16
 8001348:	d161      	bne.n	800140e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0210 	bic.w	r2, r2, #16
 8001358:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	f003 020f 	and.w	r2, r3, #15
 8001366:	4613      	mov	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	3304      	adds	r3, #4
 8001378:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	0c5b      	lsrs	r3, r3, #17
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	2b02      	cmp	r3, #2
 8001384:	d124      	bne.n	80013d0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d035      	beq.n	80013fe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	091b      	lsrs	r3, r3, #4
 800139a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800139c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	6a38      	ldr	r0, [r7, #32]
 80013a6:	f003 fe1b 	bl	8004fe0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	691a      	ldr	r2, [r3, #16]
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013b6:	441a      	add	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	6a1a      	ldr	r2, [r3, #32]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c8:	441a      	add	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	621a      	str	r2, [r3, #32]
 80013ce:	e016      	b.n	80013fe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	0c5b      	lsrs	r3, r3, #17
 80013d4:	f003 030f 	and.w	r3, r3, #15
 80013d8:	2b06      	cmp	r3, #6
 80013da:	d110      	bne.n	80013fe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013e2:	2208      	movs	r2, #8
 80013e4:	4619      	mov	r1, r3
 80013e6:	6a38      	ldr	r0, [r7, #32]
 80013e8:	f003 fdfa 	bl	8004fe0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	6a1a      	ldr	r2, [r3, #32]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013f8:	441a      	add	r2, r3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	699a      	ldr	r2, [r3, #24]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 0210 	orr.w	r2, r2, #16
 800140c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f003 ff78 	bl	8005308 <USB_ReadInterrupts>
 8001418:	4603      	mov	r3, r0
 800141a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800141e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001422:	f040 80a7 	bne.w	8001574 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f003 ff7d 	bl	800532e <USB_ReadDevAllOutEpInterrupt>
 8001434:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001436:	e099      	b.n	800156c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 808e 	beq.w	8001560 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f003 ffa1 	bl	8005396 <USB_ReadDevOutEPInterrupt>
 8001454:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00c      	beq.n	800147a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	015a      	lsls	r2, r3, #5
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	4413      	add	r3, r2
 8001468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800146c:	461a      	mov	r2, r3
 800146e:	2301      	movs	r3, #1
 8001470:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 fed7 	bl	8002228 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00c      	beq.n	800149e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	015a      	lsls	r2, r3, #5
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	4413      	add	r3, r2
 800148c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001490:	461a      	mov	r2, r3
 8001492:	2308      	movs	r3, #8
 8001494:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001496:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 ffad 	bl	80023f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	015a      	lsls	r2, r3, #5
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	4413      	add	r3, r2
 80014b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014b4:	461a      	mov	r2, r3
 80014b6:	2310      	movs	r3, #16
 80014b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d030      	beq.n	8001526 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014cc:	2b80      	cmp	r3, #128	; 0x80
 80014ce:	d109      	bne.n	80014e4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	3304      	adds	r3, #4
 80014f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	78db      	ldrb	r3, [r3, #3]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d108      	bne.n	8001514 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2200      	movs	r2, #0
 8001506:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4619      	mov	r1, r3
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f005 ffec 	bl	80074ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	015a      	lsls	r2, r3, #5
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	4413      	add	r3, r2
 800151c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001520:	461a      	mov	r2, r3
 8001522:	2302      	movs	r3, #2
 8001524:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	f003 0320 	and.w	r3, r3, #32
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	015a      	lsls	r2, r3, #5
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	4413      	add	r3, r2
 8001538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800153c:	461a      	mov	r2, r3
 800153e:	2320      	movs	r3, #32
 8001540:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d009      	beq.n	8001560 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	015a      	lsls	r2, r3, #5
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	4413      	add	r3, r2
 8001554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001558:	461a      	mov	r2, r3
 800155a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	3301      	adds	r3, #1
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001568:	085b      	lsrs	r3, r3, #1
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	2b00      	cmp	r3, #0
 8001570:	f47f af62 	bne.w	8001438 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f003 fec5 	bl	8005308 <USB_ReadInterrupts>
 800157e:	4603      	mov	r3, r0
 8001580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001584:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001588:	f040 80db 	bne.w	8001742 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f003 fee6 	bl	8005362 <USB_ReadDevAllInEpInterrupt>
 8001596:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800159c:	e0cd      	b.n	800173a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80c2 	beq.w	800172e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 ff0c 	bl	80053d2 <USB_ReadDevInEPInterrupt>
 80015ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d057      	beq.n	8001676 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	2201      	movs	r2, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	69f9      	ldr	r1, [r7, #28]
 80015e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015e6:	4013      	ands	r3, r2
 80015e8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	015a      	lsls	r2, r3, #5
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	4413      	add	r3, r2
 80015f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015f6:	461a      	mov	r2, r3
 80015f8:	2301      	movs	r3, #1
 80015fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d132      	bne.n	800166a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	334c      	adds	r3, #76	; 0x4c
 8001614:	6819      	ldr	r1, [r3, #0]
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4403      	add	r3, r0
 8001624:	3348      	adds	r3, #72	; 0x48
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4419      	add	r1, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4413      	add	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4403      	add	r3, r0
 8001638:	334c      	adds	r3, #76	; 0x4c
 800163a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	2b00      	cmp	r3, #0
 8001640:	d113      	bne.n	800166a <HAL_PCD_IRQHandler+0x3a2>
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	3354      	adds	r3, #84	; 0x54
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d108      	bne.n	800166a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001662:	461a      	mov	r2, r3
 8001664:	2101      	movs	r1, #1
 8001666:	f003 ff13 	bl	8005490 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	b2db      	uxtb	r3, r3
 800166e:	4619      	mov	r1, r3
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f005 feb6 	bl	80073e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4413      	add	r3, r2
 8001688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800168c:	461a      	mov	r2, r3
 800168e:	2308      	movs	r3, #8
 8001690:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	015a      	lsls	r2, r3, #5
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	4413      	add	r3, r2
 80016a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016a8:	461a      	mov	r2, r3
 80016aa:	2310      	movs	r3, #16
 80016ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	015a      	lsls	r2, r3, #5
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	4413      	add	r3, r2
 80016c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016c4:	461a      	mov	r2, r3
 80016c6:	2340      	movs	r3, #64	; 0x40
 80016c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d023      	beq.n	800171c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016d6:	6a38      	ldr	r0, [r7, #32]
 80016d8:	f002 fdf4 	bl	80042c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	3338      	adds	r3, #56	; 0x38
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	3304      	adds	r3, #4
 80016ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	78db      	ldrb	r3, [r3, #3]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d108      	bne.n	800170a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	2200      	movs	r2, #0
 80016fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4619      	mov	r1, r3
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f005 ff03 	bl	8007510 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	015a      	lsls	r2, r3, #5
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001716:	461a      	mov	r2, r3
 8001718:	2302      	movs	r3, #2
 800171a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 fcf0 	bl	800210e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	3301      	adds	r3, #1
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001736:	085b      	lsrs	r3, r3, #1
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173c:	2b00      	cmp	r3, #0
 800173e:	f47f af2e 	bne.w	800159e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f003 fdde 	bl	8005308 <USB_ReadInterrupts>
 800174c:	4603      	mov	r3, r0
 800174e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001756:	d122      	bne.n	800179e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001772:	2b01      	cmp	r3, #1
 8001774:	d108      	bne.n	8001788 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800177e:	2100      	movs	r1, #0
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f006 f86b 	bl	800785c <HAL_PCDEx_LPM_Callback>
 8001786:	e002      	b.n	800178e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f005 fea1 	bl	80074d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800179c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 fdb0 	bl	8005308 <USB_ReadInterrupts>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017b2:	d112      	bne.n	80017da <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d102      	bne.n	80017ca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f005 fe5d 	bl	8007484 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	695a      	ldr	r2, [r3, #20]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017d8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 fd92 	bl	8005308 <USB_ReadInterrupts>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017ee:	d121      	bne.n	8001834 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80017fe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001806:	2b00      	cmp	r3, #0
 8001808:	d111      	bne.n	800182e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	f003 020f 	and.w	r2, r3, #15
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001824:	2101      	movs	r1, #1
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f006 f818 	bl	800785c <HAL_PCDEx_LPM_Callback>
 800182c:	e002      	b.n	8001834 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f005 fe28 	bl	8007484 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f003 fd65 	bl	8005308 <USB_ReadInterrupts>
 800183e:	4603      	mov	r3, r0
 8001840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001848:	f040 80b7 	bne.w	80019ba <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2110      	movs	r1, #16
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fd2c 	bl	80042c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001870:	e046      	b.n	8001900 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	015a      	lsls	r2, r3, #5
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4413      	add	r3, r2
 800187a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800187e:	461a      	mov	r2, r3
 8001880:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001884:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001888:	015a      	lsls	r2, r3, #5
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	4413      	add	r3, r2
 800188e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001896:	0151      	lsls	r1, r2, #5
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	440a      	add	r2, r1
 800189c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b2:	461a      	mov	r2, r3
 80018b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018bc:	015a      	lsls	r2, r3, #5
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	4413      	add	r3, r2
 80018c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ca:	0151      	lsls	r1, r2, #5
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	440a      	add	r2, r1
 80018d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ea:	0151      	lsls	r1, r2, #5
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	440a      	add	r2, r1
 80018f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	3301      	adds	r3, #1
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001906:	429a      	cmp	r2, r3
 8001908:	d3b3      	bcc.n	8001872 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001918:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800191c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	2b00      	cmp	r3, #0
 8001924:	d016      	beq.n	8001954 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800192c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001936:	f043 030b 	orr.w	r3, r3, #11
 800193a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800194c:	f043 030b 	orr.w	r3, r3, #11
 8001950:	6453      	str	r3, [r2, #68]	; 0x44
 8001952:	e015      	b.n	8001980 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001962:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001966:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800196a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800197a:	f043 030b 	orr.w	r3, r3, #11
 800197e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800198e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001992:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019a4:	461a      	mov	r2, r3
 80019a6:	f003 fd73 	bl	8005490 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 fca2 	bl	8005308 <USB_ReadInterrupts>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ce:	d124      	bne.n	8001a1a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 fd38 	bl	800544a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fced 	bl	80043be <USB_GetDevSpeed>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681c      	ldr	r4, [r3, #0]
 80019f0:	f000 feaa 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 80019f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	4620      	mov	r0, r4
 8001a00:	f002 f9f2 	bl	8003de8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f005 fd14 	bl	8007432 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695a      	ldr	r2, [r3, #20]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a18:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fc72 	bl	8005308 <USB_ReadInterrupts>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d10a      	bne.n	8001a44 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f005 fcf1 	bl	8007416 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f002 0208 	and.w	r2, r2, #8
 8001a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 fc5d 	bl	8005308 <USB_ReadInterrupts>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a54:	2b80      	cmp	r3, #128	; 0x80
 8001a56:	d122      	bne.n	8001a9e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a64:	2301      	movs	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
 8001a68:	e014      	b.n	8001a94 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6e:	4613      	mov	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d105      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	4619      	mov	r1, r3
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fb0f 	bl	80020ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	3301      	adds	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d3e5      	bcc.n	8001a6a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fc30 	bl	8005308 <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ab2:	d13b      	bne.n	8001b2c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	e02b      	b.n	8001b12 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	015a      	lsls	r2, r3, #5
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	3340      	adds	r3, #64	; 0x40
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d115      	bne.n	8001b0c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ae0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	da12      	bge.n	8001b0c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	333f      	adds	r3, #63	; 0x3f
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	4619      	mov	r1, r3
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fad0 	bl	80020ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	3301      	adds	r3, #1
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d3ce      	bcc.n	8001aba <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fbe9 	bl	8005308 <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b40:	d155      	bne.n	8001bee <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b42:	2301      	movs	r3, #1
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	e045      	b.n	8001bd4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d12e      	bne.n	8001bce <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	da2b      	bge.n	8001bce <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b82:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d121      	bne.n	8001bce <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10a      	bne.n	8001bce <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bca:	6053      	str	r3, [r2, #4]
            break;
 8001bcc:	e007      	b.n	8001bde <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d3b4      	bcc.n	8001b48 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fb88 	bl	8005308 <USB_ReadInterrupts>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c02:	d10a      	bne.n	8001c1a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f005 fc95 	bl	8007534 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 fb72 	bl	8005308 <USB_ReadInterrupts>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d115      	bne.n	8001c5a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f005 fc85 	bl	8007550 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	e000      	b.n	8001c5a <HAL_PCD_IRQHandler+0x992>
      return;
 8001c58:	bf00      	nop
    }
  }
}
 8001c5a:	3734      	adds	r7, #52	; 0x34
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd90      	pop	{r4, r7, pc}

08001c60 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_PCD_SetAddress+0x1a>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e013      	b.n	8001ca2 <HAL_PCD_SetAddress+0x42>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	78fa      	ldrb	r2, [r7, #3]
 8001c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	78fa      	ldrb	r2, [r7, #3]
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fad0 	bl	8005238 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	4608      	mov	r0, r1
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4603      	mov	r3, r0
 8001cba:	70fb      	strb	r3, [r7, #3]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	803b      	strh	r3, [r7, #0]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da0f      	bge.n	8001cf0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	f003 020f 	and.w	r2, r3, #15
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	3338      	adds	r3, #56	; 0x38
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	705a      	strb	r2, [r3, #1]
 8001cee:	e00f      	b.n	8001d10 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	f003 020f 	and.w	r2, r3, #15
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	3304      	adds	r3, #4
 8001d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d1c:	883a      	ldrh	r2, [r7, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	78ba      	ldrb	r2, [r7, #2]
 8001d26:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d3a:	78bb      	ldrb	r3, [r7, #2]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d102      	bne.n	8001d46 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_PCD_EP_Open+0xaa>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e00e      	b.n	8001d72 <HAL_PCD_EP_Open+0xc8>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68f9      	ldr	r1, [r7, #12]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 fb50 	bl	8004408 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001d70:	7afb      	ldrb	r3, [r7, #11]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	da0f      	bge.n	8001dae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	f003 020f 	and.w	r2, r3, #15
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	3338      	adds	r3, #56	; 0x38
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	3304      	adds	r3, #4
 8001da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	705a      	strb	r2, [r3, #1]
 8001dac:	e00f      	b.n	8001dce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	f003 020f 	and.w	r2, r3, #15
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_PCD_EP_Close+0x6e>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e00e      	b.n	8001e06 <HAL_PCD_EP_Close+0x8c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68f9      	ldr	r1, [r7, #12]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fb8e 	bl	8004518 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e1e:	7afb      	ldrb	r3, [r7, #11]
 8001e20:	f003 020f 	and.w	r2, r3, #15
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4413      	add	r3, r2
 8001e34:	3304      	adds	r3, #4
 8001e36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2200      	movs	r2, #0
 8001e48:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e50:	7afb      	ldrb	r3, [r7, #11]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d102      	bne.n	8001e6a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	6979      	ldr	r1, [r7, #20]
 8001e82:	f002 fe6d 	bl	8004b60 <USB_EP0StartXfer>
 8001e86:	e008      	b.n	8001e9a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	6979      	ldr	r1, [r7, #20]
 8001e96:	f002 fc1b 	bl	80046d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb4:	7afb      	ldrb	r3, [r7, #11]
 8001eb6:	f003 020f 	and.w	r2, r3, #15
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	3338      	adds	r3, #56	; 0x38
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3304      	adds	r3, #4
 8001eca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2200      	movs	r2, #0
 8001edc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d102      	bne.n	8001efe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	6979      	ldr	r1, [r7, #20]
 8001f16:	f002 fe23 	bl	8004b60 <USB_EP0StartXfer>
 8001f1a:	e008      	b.n	8001f2e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	6979      	ldr	r1, [r7, #20]
 8001f2a:	f002 fbd1 	bl	80046d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 020f 	and.w	r2, r3, #15
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d901      	bls.n	8001f56 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e050      	b.n	8001ff8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	da0f      	bge.n	8001f7e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	f003 020f 	and.w	r2, r3, #15
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	3338      	adds	r3, #56	; 0x38
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	3304      	adds	r3, #4
 8001f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	705a      	strb	r2, [r3, #1]
 8001f7c:	e00d      	b.n	8001f9a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	3304      	adds	r3, #4
 8001f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_PCD_EP_SetStall+0x82>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e01e      	b.n	8001ff8 <HAL_PCD_EP_SetStall+0xc0>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68f9      	ldr	r1, [r7, #12]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 f861 	bl	8005090 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10a      	bne.n	8001fee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	b2d9      	uxtb	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f003 fa51 	bl	8005490 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	f003 020f 	and.w	r2, r3, #15
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	429a      	cmp	r2, r3
 8002018:	d901      	bls.n	800201e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e042      	b.n	80020a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800201e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002022:	2b00      	cmp	r3, #0
 8002024:	da0f      	bge.n	8002046 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f003 020f 	and.w	r2, r3, #15
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	3338      	adds	r3, #56	; 0x38
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	705a      	strb	r2, [r3, #1]
 8002044:	e00f      	b.n	8002066 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	f003 020f 	and.w	r2, r3, #15
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	3304      	adds	r3, #4
 800205e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	b2da      	uxtb	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_PCD_EP_ClrStall+0x86>
 8002082:	2302      	movs	r3, #2
 8002084:	e00e      	b.n	80020a4 <HAL_PCD_EP_ClrStall+0xa4>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	4618      	mov	r0, r3
 8002096:	f003 f869 	bl	800516c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80020b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da0c      	bge.n	80020da <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 020f 	and.w	r2, r3, #15
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	3338      	adds	r3, #56	; 0x38
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	3304      	adds	r3, #4
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e00c      	b.n	80020f4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	f003 020f 	and.w	r2, r3, #15
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	3304      	adds	r3, #4
 80020f2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68f9      	ldr	r1, [r7, #12]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f002 fe88 	bl	8004e10 <USB_EPStopXfer>
 8002100:	4603      	mov	r3, r0
 8002102:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002104:	7afb      	ldrb	r3, [r7, #11]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b08a      	sub	sp, #40	; 0x28
 8002112:	af02      	add	r7, sp, #8
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	3338      	adds	r3, #56	; 0x38
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	3304      	adds	r3, #4
 8002134:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a1a      	ldr	r2, [r3, #32]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	429a      	cmp	r2, r3
 8002140:	d901      	bls.n	8002146 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e06c      	b.n	8002220 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	429a      	cmp	r2, r3
 800215a:	d902      	bls.n	8002162 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3303      	adds	r3, #3
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800216a:	e02b      	b.n	80021c4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	699a      	ldr	r2, [r3, #24]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	429a      	cmp	r2, r3
 8002180:	d902      	bls.n	8002188 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	3303      	adds	r3, #3
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6919      	ldr	r1, [r3, #16]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	4603      	mov	r3, r0
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f002 fedc 	bl	8004f64 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	441a      	add	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a1a      	ldr	r2, [r3, #32]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	441a      	add	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d809      	bhi.n	80021ee <PCD_WriteEmptyTxFifo+0xe0>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a1a      	ldr	r2, [r3, #32]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d203      	bcs.n	80021ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1be      	bne.n	800216c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d811      	bhi.n	800221e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	2201      	movs	r2, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800220e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	43db      	mvns	r3, r3
 8002214:	6939      	ldr	r1, [r7, #16]
 8002216:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800221a:	4013      	ands	r3, r2
 800221c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	333c      	adds	r3, #60	; 0x3c
 8002240:	3304      	adds	r3, #4
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d17b      	bne.n	8002356 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d015      	beq.n	8002294 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	4a61      	ldr	r2, [pc, #388]	; (80023f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	f240 80b9 	bls.w	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80b3 	beq.w	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	4413      	add	r3, r2
 8002286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800228a:	461a      	mov	r2, r3
 800228c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002290:	6093      	str	r3, [r2, #8]
 8002292:	e0a7      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022aa:	461a      	mov	r2, r3
 80022ac:	2320      	movs	r3, #32
 80022ae:	6093      	str	r3, [r2, #8]
 80022b0:	e098      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f040 8093 	bne.w	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	4a4b      	ldr	r2, [pc, #300]	; (80023f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d90f      	bls.n	80022e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022dc:	461a      	mov	r2, r3
 80022de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e2:	6093      	str	r3, [r2, #8]
 80022e4:	e07e      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	3304      	adds	r3, #4
 80022fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	0159      	lsls	r1, r3, #5
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	440b      	add	r3, r1
 8002308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002312:	1ad2      	subs	r2, r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d114      	bne.n	8002348 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002330:	461a      	mov	r2, r3
 8002332:	2101      	movs	r1, #1
 8002334:	f003 f8ac 	bl	8005490 <USB_EP0_OutStart>
 8002338:	e006      	b.n	8002348 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	441a      	add	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4619      	mov	r1, r3
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f005 f82c 	bl	80073ac <HAL_PCD_DataOutStageCallback>
 8002354:	e046      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	4a26      	ldr	r2, [pc, #152]	; (80023f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d124      	bne.n	80023a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002374:	461a      	mov	r2, r3
 8002376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237a:	6093      	str	r3, [r2, #8]
 800237c:	e032      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002394:	461a      	mov	r2, r3
 8002396:	2320      	movs	r3, #32
 8002398:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f005 f803 	bl	80073ac <HAL_PCD_DataOutStageCallback>
 80023a6:	e01d      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d114      	bne.n	80023d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d108      	bne.n	80023d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023d0:	461a      	mov	r2, r3
 80023d2:	2100      	movs	r1, #0
 80023d4:	f003 f85c 	bl	8005490 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	4619      	mov	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f004 ffe4 	bl	80073ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	4f54300a 	.word	0x4f54300a
 80023f4:	4f54310a 	.word	0x4f54310a

080023f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	333c      	adds	r3, #60	; 0x3c
 8002410:	3304      	adds	r3, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4a15      	ldr	r2, [pc, #84]	; (8002480 <PCD_EP_OutSetupPacket_int+0x88>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d90e      	bls.n	800244c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002434:	2b00      	cmp	r3, #0
 8002436:	d009      	beq.n	800244c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002444:	461a      	mov	r2, r3
 8002446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800244a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f004 ff9b 	bl	8007388 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <PCD_EP_OutSetupPacket_int+0x88>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d90c      	bls.n	8002474 <PCD_EP_OutSetupPacket_int+0x7c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d108      	bne.n	8002474 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800246c:	461a      	mov	r2, r3
 800246e:	2101      	movs	r1, #1
 8002470:	f003 f80e 	bl	8005490 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	4f54300a 	.word	0x4f54300a

08002484 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
 8002490:	4613      	mov	r3, r2
 8002492:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d107      	bne.n	80024b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024a2:	883b      	ldrh	r3, [r7, #0]
 80024a4:	0419      	lsls	r1, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
 80024b0:	e028      	b.n	8002504 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4413      	add	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]
 80024c4:	e00d      	b.n	80024e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	3340      	adds	r3, #64	; 0x40
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	4413      	add	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	3301      	adds	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d3ec      	bcc.n	80024c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024ec:	883b      	ldrh	r3, [r7, #0]
 80024ee:	0418      	lsls	r0, r3, #16
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	4302      	orrs	r2, r0
 80024fc:	3340      	adds	r3, #64	; 0x40
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002566:	f043 0303 	orr.w	r3, r3, #3
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0cc      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002590:	4b68      	ldr	r3, [pc, #416]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d90c      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b8      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a58      	ldr	r2, [pc, #352]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f4:	4b50      	ldr	r3, [pc, #320]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	494d      	ldr	r1, [pc, #308]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d044      	beq.n	800269c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d119      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d003      	beq.n	800263a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002636:	2b03      	cmp	r3, #3
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	4b3f      	ldr	r3, [pc, #252]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e067      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265a:	4b37      	ldr	r3, [pc, #220]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f023 0203 	bic.w	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4934      	ldr	r1, [pc, #208]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266c:	f7fe f9e6 	bl	8000a3c <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	e00a      	b.n	800268a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002674:	f7fe f9e2 	bl	8000a3c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e04f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 020c 	and.w	r2, r3, #12
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	429a      	cmp	r2, r3
 800269a:	d1eb      	bne.n	8002674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d20c      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e032      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4916      	ldr	r1, [pc, #88]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	490e      	ldr	r1, [pc, #56]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002702:	f000 fb7f 	bl	8002e04 <HAL_RCC_GetSysClockFreq>
 8002706:	4602      	mov	r2, r0
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	490a      	ldr	r1, [pc, #40]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	5ccb      	ldrb	r3, [r1, r3]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe f946 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023c00 	.word	0x40023c00
 8002738:	40023800 	.word	0x40023800
 800273c:	08007a38 	.word	0x08007a38
 8002740:	20000000 	.word	0x20000000
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_RCC_GetHCLKFreq+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000000 	.word	0x20000000

08002760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002764:	f7ff fff0 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0a9b      	lsrs	r3, r3, #10
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	; (8002784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	08007a48 	.word	0x08007a48

08002788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800278c:	f7ff ffdc 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0b5b      	lsrs	r3, r3, #13
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	; (80027ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	08007a48 	.word	0x08007a48

080027b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	; 0x30
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d010      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80027e8:	4b6f      	ldr	r3, [pc, #444]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ee:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	496c      	ldr	r1, [pc, #432]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002806:	2301      	movs	r3, #1
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002816:	4b64      	ldr	r3, [pc, #400]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800281c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	4960      	ldr	r1, [pc, #384]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002834:	2301      	movs	r3, #1
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d017      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002844:	4b58      	ldr	r3, [pc, #352]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800284a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4955      	ldr	r1, [pc, #340]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002862:	d101      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002864:	2301      	movs	r3, #1
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002870:	2301      	movs	r3, #1
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d017      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002880:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002886:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288e:	4946      	ldr	r1, [pc, #280]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800289e:	d101      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80028a0:	2301      	movs	r3, #1
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80028ac:	2301      	movs	r3, #1
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 808a 	beq.w	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a38      	ldr	r2, [pc, #224]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80028da:	4b34      	ldr	r3, [pc, #208]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a33      	ldr	r2, [pc, #204]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028e6:	f7fe f8a9 	bl	8000a3c <HAL_GetTick>
 80028ea:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80028ee:	f7fe f8a5 	bl	8000a3c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e278      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002900:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800290c:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002914:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d02f      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002924:	6a3a      	ldr	r2, [r7, #32]
 8002926:	429a      	cmp	r2, r3
 8002928:	d028      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800292a:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002932:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002934:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002940:	4a19      	ldr	r2, [pc, #100]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d114      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002952:	f7fe f873 	bl	8000a3c <HAL_GetTick>
 8002956:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002958:	e00a      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7fe f86f 	bl	8000a3c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	; 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e240      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ee      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002988:	d114      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800298a:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800299a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299e:	4902      	ldr	r1, [pc, #8]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	608b      	str	r3, [r1, #8]
 80029a4:	e00c      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40007000 	.word	0x40007000
 80029b0:	42470e40 	.word	0x42470e40
 80029b4:	4b4a      	ldr	r3, [pc, #296]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a49      	ldr	r2, [pc, #292]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80029be:	6093      	str	r3, [r2, #8]
 80029c0:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029cc:	4944      	ldr	r1, [pc, #272]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80029e4:	4b3f      	ldr	r3, [pc, #252]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80029e6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80029f4:	4b3a      	ldr	r3, [pc, #232]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	4937      	ldr	r1, [pc, #220]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a16:	4b32      	ldr	r3, [pc, #200]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a24:	492e      	ldr	r1, [pc, #184]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d011      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a38:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	4926      	ldr	r1, [pc, #152]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a56:	d101      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002a68:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	491a      	ldr	r1, [pc, #104]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d011      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a90:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a98:	4911      	ldr	r1, [pc, #68]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aa8:	d101      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002abc:	f040 80ff 	bne.w	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ac6:	f7fd ffb9 	bl	8000a3c <HAL_GetTick>
 8002aca:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002acc:	e00e      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ace:	f7fd ffb5 	bl	8000a3c <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d907      	bls.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e188      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	424711e0 	.word	0x424711e0
 8002ae8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aec:	4b7e      	ldr	r3, [pc, #504]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1ea      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d009      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d028      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d124      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b20:	4b71      	ldr	r3, [pc, #452]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b26:	0c1b      	lsrs	r3, r3, #16
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b32:	4b6d      	ldr	r3, [pc, #436]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b38:	0e1b      	lsrs	r3, r3, #24
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	019b      	lsls	r3, r3, #6
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	3b01      	subs	r3, #1
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	431a      	orrs	r2, r3
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	061b      	lsls	r3, r3, #24
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	071b      	lsls	r3, r3, #28
 8002b62:	4961      	ldr	r1, [pc, #388]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d004      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d035      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b94:	d130      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b96:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ba8:	4b4f      	ldr	r3, [pc, #316]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bae:	0f1b      	lsrs	r3, r3, #28
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	019b      	lsls	r3, r3, #6
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	041b      	lsls	r3, r3, #16
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	071b      	lsls	r3, r3, #28
 8002bd8:	4943      	ldr	r1, [pc, #268]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002be0:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be6:	f023 021f 	bic.w	r2, r3, #31
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	493d      	ldr	r1, [pc, #244]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d029      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c0c:	d124      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c0e:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c14:	0c1b      	lsrs	r3, r3, #16
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c20:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c26:	0f1b      	lsrs	r3, r3, #28
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	019b      	lsls	r3, r3, #6
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	085b      	lsrs	r3, r3, #1
 8002c40:	3b01      	subs	r3, #1
 8002c42:	041b      	lsls	r3, r3, #16
 8002c44:	431a      	orrs	r2, r3
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	071b      	lsls	r3, r3, #28
 8002c50:	4925      	ldr	r1, [pc, #148]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d016      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	019b      	lsls	r3, r3, #6
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	3b01      	subs	r3, #1
 8002c78:	041b      	lsls	r3, r3, #16
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	071b      	lsls	r3, r3, #28
 8002c8a:	4917      	ldr	r1, [pc, #92]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c98:	f7fd fed0 	bl	8000a3c <HAL_GetTick>
 8002c9c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ca0:	f7fd fecc 	bl	8000a3c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e09f      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	f040 8095 	bne.w	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ccc:	f7fd feb6 	bl	8000a3c <HAL_GetTick>
 8002cd0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cd2:	e00f      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002cd4:	f7fd feb2 	bl	8000a3c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d908      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e085      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	42470068 	.word	0x42470068
 8002cf0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cf4:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d00:	d0e8      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d02b      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d127      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002d2a:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d30:	0c1b      	lsrs	r3, r3, #16
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	3301      	adds	r3, #1
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	019b      	lsls	r3, r3, #6
 8002d46:	431a      	orrs	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	061b      	lsls	r3, r3, #24
 8002d58:	4928      	ldr	r1, [pc, #160]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d60:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d66:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	4922      	ldr	r1, [pc, #136]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01d      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d8e:	d118      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d90:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	0e1b      	lsrs	r3, r3, #24
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	019b      	lsls	r3, r3, #6
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	3b01      	subs	r3, #1
 8002db2:	041b      	lsls	r3, r3, #16
 8002db4:	431a      	orrs	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	061b      	lsls	r3, r3, #24
 8002dba:	4910      	ldr	r1, [pc, #64]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dc8:	f7fd fe38 	bl	8000a3c <HAL_GetTick>
 8002dcc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002dd0:	f7fd fe34 	bl	8000a3c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e007      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dee:	d1ef      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3730      	adds	r7, #48	; 0x30
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	42470070 	.word	0x42470070

08002e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e08:	b0ae      	sub	sp, #184	; 0xb8
 8002e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e2a:	4bcb      	ldr	r3, [pc, #812]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b0c      	cmp	r3, #12
 8002e34:	f200 8206 	bhi.w	8003244 <HAL_RCC_GetSysClockFreq+0x440>
 8002e38:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002e75 	.word	0x08002e75
 8002e44:	08003245 	.word	0x08003245
 8002e48:	08003245 	.word	0x08003245
 8002e4c:	08003245 	.word	0x08003245
 8002e50:	08002e7d 	.word	0x08002e7d
 8002e54:	08003245 	.word	0x08003245
 8002e58:	08003245 	.word	0x08003245
 8002e5c:	08003245 	.word	0x08003245
 8002e60:	08002e85 	.word	0x08002e85
 8002e64:	08003245 	.word	0x08003245
 8002e68:	08003245 	.word	0x08003245
 8002e6c:	08003245 	.word	0x08003245
 8002e70:	08003075 	.word	0x08003075
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4bb9      	ldr	r3, [pc, #740]	; (800315c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002e7a:	e1e7      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e7c:	4bb8      	ldr	r3, [pc, #736]	; (8003160 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e82:	e1e3      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e84:	4bb4      	ldr	r3, [pc, #720]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e90:	4bb1      	ldr	r3, [pc, #708]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d071      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e9c:	4bae      	ldr	r3, [pc, #696]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	099b      	lsrs	r3, r3, #6
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ea8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ebe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ec2:	4622      	mov	r2, r4
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	f04f 0000 	mov.w	r0, #0
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	0159      	lsls	r1, r3, #5
 8002ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed4:	0150      	lsls	r0, r2, #5
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4621      	mov	r1, r4
 8002edc:	1a51      	subs	r1, r2, r1
 8002ede:	6439      	str	r1, [r7, #64]	; 0x40
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	018b      	lsls	r3, r1, #6
 8002ef8:	4641      	mov	r1, r8
 8002efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002efe:	4641      	mov	r1, r8
 8002f00:	018a      	lsls	r2, r1, #6
 8002f02:	4641      	mov	r1, r8
 8002f04:	1a51      	subs	r1, r2, r1
 8002f06:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f08:	4649      	mov	r1, r9
 8002f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f1c:	4649      	mov	r1, r9
 8002f1e:	00cb      	lsls	r3, r1, #3
 8002f20:	4641      	mov	r1, r8
 8002f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f26:	4641      	mov	r1, r8
 8002f28:	00ca      	lsls	r2, r1, #3
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4622      	mov	r2, r4
 8002f32:	189b      	adds	r3, r3, r2
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30
 8002f36:	462b      	mov	r3, r5
 8002f38:	460a      	mov	r2, r1
 8002f3a:	eb42 0303 	adc.w	r3, r2, r3
 8002f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	024b      	lsls	r3, r1, #9
 8002f50:	4621      	mov	r1, r4
 8002f52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f56:	4621      	mov	r1, r4
 8002f58:	024a      	lsls	r2, r1, #9
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f70:	f7fd f948 	bl	8000204 <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4613      	mov	r3, r2
 8002f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f7e:	e067      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f80:	4b75      	ldr	r3, [pc, #468]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f8c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	462b      	mov	r3, r5
 8002fa6:	f04f 0000 	mov.w	r0, #0
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	0159      	lsls	r1, r3, #5
 8002fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb4:	0150      	lsls	r0, r2, #5
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4621      	mov	r1, r4
 8002fbc:	1a51      	subs	r1, r2, r1
 8002fbe:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	018b      	lsls	r3, r1, #6
 8002fd8:	4641      	mov	r1, r8
 8002fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fde:	4641      	mov	r1, r8
 8002fe0:	018a      	lsls	r2, r1, #6
 8002fe2:	4641      	mov	r1, r8
 8002fe4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fe8:	4649      	mov	r1, r9
 8002fea:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ffa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ffe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003002:	4692      	mov	sl, r2
 8003004:	469b      	mov	fp, r3
 8003006:	4623      	mov	r3, r4
 8003008:	eb1a 0303 	adds.w	r3, sl, r3
 800300c:	623b      	str	r3, [r7, #32]
 800300e:	462b      	mov	r3, r5
 8003010:	eb4b 0303 	adc.w	r3, fp, r3
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003022:	4629      	mov	r1, r5
 8003024:	028b      	lsls	r3, r1, #10
 8003026:	4621      	mov	r1, r4
 8003028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800302c:	4621      	mov	r1, r4
 800302e:	028a      	lsls	r2, r1, #10
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003038:	2200      	movs	r2, #0
 800303a:	673b      	str	r3, [r7, #112]	; 0x70
 800303c:	677a      	str	r2, [r7, #116]	; 0x74
 800303e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003042:	f7fd f8df 	bl	8000204 <__aeabi_uldivmod>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4613      	mov	r3, r2
 800304c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003050:	4b41      	ldr	r3, [pc, #260]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	3301      	adds	r3, #1
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003066:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003072:	e0eb      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003074:	4b38      	ldr	r3, [pc, #224]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800307c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003080:	4b35      	ldr	r3, [pc, #212]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d06b      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308c:	4b32      	ldr	r3, [pc, #200]	; (8003158 <HAL_RCC_GetSysClockFreq+0x354>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	2200      	movs	r2, #0
 8003094:	66bb      	str	r3, [r7, #104]	; 0x68
 8003096:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003098:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800309a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309e:	663b      	str	r3, [r7, #96]	; 0x60
 80030a0:	2300      	movs	r3, #0
 80030a2:	667b      	str	r3, [r7, #100]	; 0x64
 80030a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030a8:	4622      	mov	r2, r4
 80030aa:	462b      	mov	r3, r5
 80030ac:	f04f 0000 	mov.w	r0, #0
 80030b0:	f04f 0100 	mov.w	r1, #0
 80030b4:	0159      	lsls	r1, r3, #5
 80030b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ba:	0150      	lsls	r0, r2, #5
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4621      	mov	r1, r4
 80030c2:	1a51      	subs	r1, r2, r1
 80030c4:	61b9      	str	r1, [r7, #24]
 80030c6:	4629      	mov	r1, r5
 80030c8:	eb63 0301 	sbc.w	r3, r3, r1
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030da:	4659      	mov	r1, fp
 80030dc:	018b      	lsls	r3, r1, #6
 80030de:	4651      	mov	r1, sl
 80030e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030e4:	4651      	mov	r1, sl
 80030e6:	018a      	lsls	r2, r1, #6
 80030e8:	4651      	mov	r1, sl
 80030ea:	ebb2 0801 	subs.w	r8, r2, r1
 80030ee:	4659      	mov	r1, fp
 80030f0:	eb63 0901 	sbc.w	r9, r3, r1
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003100:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003104:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003108:	4690      	mov	r8, r2
 800310a:	4699      	mov	r9, r3
 800310c:	4623      	mov	r3, r4
 800310e:	eb18 0303 	adds.w	r3, r8, r3
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	462b      	mov	r3, r5
 8003116:	eb49 0303 	adc.w	r3, r9, r3
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003128:	4629      	mov	r1, r5
 800312a:	024b      	lsls	r3, r1, #9
 800312c:	4621      	mov	r1, r4
 800312e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003132:	4621      	mov	r1, r4
 8003134:	024a      	lsls	r2, r1, #9
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800313e:	2200      	movs	r2, #0
 8003140:	65bb      	str	r3, [r7, #88]	; 0x58
 8003142:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003144:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003148:	f7fd f85c 	bl	8000204 <__aeabi_uldivmod>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4613      	mov	r3, r2
 8003152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003156:	e065      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x420>
 8003158:	40023800 	.word	0x40023800
 800315c:	00f42400 	.word	0x00f42400
 8003160:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003164:	4b3d      	ldr	r3, [pc, #244]	; (800325c <HAL_RCC_GetSysClockFreq+0x458>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	099b      	lsrs	r3, r3, #6
 800316a:	2200      	movs	r2, #0
 800316c:	4618      	mov	r0, r3
 800316e:	4611      	mov	r1, r2
 8003170:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003174:	653b      	str	r3, [r7, #80]	; 0x50
 8003176:	2300      	movs	r3, #0
 8003178:	657b      	str	r3, [r7, #84]	; 0x54
 800317a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800317e:	4642      	mov	r2, r8
 8003180:	464b      	mov	r3, r9
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	0159      	lsls	r1, r3, #5
 800318c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003190:	0150      	lsls	r0, r2, #5
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4641      	mov	r1, r8
 8003198:	1a51      	subs	r1, r2, r1
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	4649      	mov	r1, r9
 800319e:	eb63 0301 	sbc.w	r3, r3, r1
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031b0:	4659      	mov	r1, fp
 80031b2:	018b      	lsls	r3, r1, #6
 80031b4:	4651      	mov	r1, sl
 80031b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ba:	4651      	mov	r1, sl
 80031bc:	018a      	lsls	r2, r1, #6
 80031be:	4651      	mov	r1, sl
 80031c0:	1a54      	subs	r4, r2, r1
 80031c2:	4659      	mov	r1, fp
 80031c4:	eb63 0501 	sbc.w	r5, r3, r1
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	00eb      	lsls	r3, r5, #3
 80031d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d6:	00e2      	lsls	r2, r4, #3
 80031d8:	4614      	mov	r4, r2
 80031da:	461d      	mov	r5, r3
 80031dc:	4643      	mov	r3, r8
 80031de:	18e3      	adds	r3, r4, r3
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	464b      	mov	r3, r9
 80031e4:	eb45 0303 	adc.w	r3, r5, r3
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031f6:	4629      	mov	r1, r5
 80031f8:	028b      	lsls	r3, r1, #10
 80031fa:	4621      	mov	r1, r4
 80031fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003200:	4621      	mov	r1, r4
 8003202:	028a      	lsls	r2, r1, #10
 8003204:	4610      	mov	r0, r2
 8003206:	4619      	mov	r1, r3
 8003208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800320c:	2200      	movs	r2, #0
 800320e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003210:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003212:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003216:	f7fc fff5 	bl	8000204 <__aeabi_uldivmod>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4613      	mov	r3, r2
 8003220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <HAL_RCC_GetSysClockFreq+0x458>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	0f1b      	lsrs	r3, r3, #28
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003236:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003242:	e003      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800324a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800324c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003250:	4618      	mov	r0, r3
 8003252:	37b8      	adds	r7, #184	; 0xb8
 8003254:	46bd      	mov	sp, r7
 8003256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800
 8003260:	00f42400 	.word	0x00f42400

08003264 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e28d      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8083 	beq.w	800338a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003284:	4b94      	ldr	r3, [pc, #592]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b04      	cmp	r3, #4
 800328e:	d019      	beq.n	80032c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003290:	4b91      	ldr	r3, [pc, #580]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003298:	2b08      	cmp	r3, #8
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800329c:	4b8e      	ldr	r3, [pc, #568]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a8:	d00c      	beq.n	80032c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032aa:	4b8b      	ldr	r3, [pc, #556]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	d112      	bne.n	80032dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b6:	4b88      	ldr	r3, [pc, #544]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c2:	d10b      	bne.n	80032dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	4b84      	ldr	r3, [pc, #528]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d05b      	beq.n	8003388 <HAL_RCC_OscConfig+0x124>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d157      	bne.n	8003388 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e25a      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e4:	d106      	bne.n	80032f4 <HAL_RCC_OscConfig+0x90>
 80032e6:	4b7c      	ldr	r3, [pc, #496]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a7b      	ldr	r2, [pc, #492]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e01d      	b.n	8003330 <HAL_RCC_OscConfig+0xcc>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0xb4>
 80032fe:	4b76      	ldr	r3, [pc, #472]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a75      	ldr	r2, [pc, #468]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b73      	ldr	r3, [pc, #460]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a72      	ldr	r2, [pc, #456]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0xcc>
 8003318:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6e      	ldr	r2, [pc, #440]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800331e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b6c      	ldr	r3, [pc, #432]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a6b      	ldr	r2, [pc, #428]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800332a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fd fb80 	bl	8000a3c <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003340:	f7fd fb7c 	bl	8000a3c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e21f      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b61      	ldr	r3, [pc, #388]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0xdc>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fd fb6c 	bl	8000a3c <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003368:	f7fd fb68 	bl	8000a3c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e20b      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	4b57      	ldr	r3, [pc, #348]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x104>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d06f      	beq.n	8003476 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003396:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d017      	beq.n	80033d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033a2:	4b4d      	ldr	r3, [pc, #308]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d105      	bne.n	80033ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033ae:	4b4a      	ldr	r3, [pc, #296]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ba:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d11c      	bne.n	8003400 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c6:	4b44      	ldr	r3, [pc, #272]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d116      	bne.n	8003400 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d2:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_RCC_OscConfig+0x186>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d001      	beq.n	80033ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e1d3      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ea:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4937      	ldr	r1, [pc, #220]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	e03a      	b.n	8003476 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003408:	4b34      	ldr	r3, [pc, #208]	; (80034dc <HAL_RCC_OscConfig+0x278>)
 800340a:	2201      	movs	r2, #1
 800340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fd fb15 	bl	8000a3c <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003416:	f7fd fb11 	bl	8000a3c <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e1b4      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003428:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003434:	4b28      	ldr	r3, [pc, #160]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4925      	ldr	r1, [pc, #148]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003444:	4313      	orrs	r3, r2
 8003446:	600b      	str	r3, [r1, #0]
 8003448:	e015      	b.n	8003476 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344a:	4b24      	ldr	r3, [pc, #144]	; (80034dc <HAL_RCC_OscConfig+0x278>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fd faf4 	bl	8000a3c <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003458:	f7fd faf0 	bl	8000a3c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e193      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346a:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d036      	beq.n	80034f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d016      	beq.n	80034b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <HAL_RCC_OscConfig+0x27c>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7fd fad4 	bl	8000a3c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003498:	f7fd fad0 	bl	8000a3c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e173      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 80034ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0x234>
 80034b6:	e01b      	b.n	80034f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b8:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034be:	f7fd fabd 	bl	8000a3c <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c4:	e00e      	b.n	80034e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c6:	f7fd fab9 	bl	8000a3c <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d907      	bls.n	80034e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e15c      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
 80034d8:	40023800 	.word	0x40023800
 80034dc:	42470000 	.word	0x42470000
 80034e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e4:	4b8a      	ldr	r3, [pc, #552]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80034e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ea      	bne.n	80034c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8097 	beq.w	800362c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003502:	4b83      	ldr	r3, [pc, #524]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10f      	bne.n	800352e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	4b7f      	ldr	r3, [pc, #508]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	4a7e      	ldr	r2, [pc, #504]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351c:	6413      	str	r3, [r2, #64]	; 0x40
 800351e:	4b7c      	ldr	r3, [pc, #496]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352a:	2301      	movs	r3, #1
 800352c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352e:	4b79      	ldr	r3, [pc, #484]	; (8003714 <HAL_RCC_OscConfig+0x4b0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d118      	bne.n	800356c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353a:	4b76      	ldr	r3, [pc, #472]	; (8003714 <HAL_RCC_OscConfig+0x4b0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a75      	ldr	r2, [pc, #468]	; (8003714 <HAL_RCC_OscConfig+0x4b0>)
 8003540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003546:	f7fd fa79 	bl	8000a3c <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354e:	f7fd fa75 	bl	8000a3c <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e118      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	4b6c      	ldr	r3, [pc, #432]	; (8003714 <HAL_RCC_OscConfig+0x4b0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x31e>
 8003574:	4b66      	ldr	r3, [pc, #408]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	4a65      	ldr	r2, [pc, #404]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6713      	str	r3, [r2, #112]	; 0x70
 8003580:	e01c      	b.n	80035bc <HAL_RCC_OscConfig+0x358>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b05      	cmp	r3, #5
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x340>
 800358a:	4b61      	ldr	r3, [pc, #388]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	4a60      	ldr	r2, [pc, #384]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003590:	f043 0304 	orr.w	r3, r3, #4
 8003594:	6713      	str	r3, [r2, #112]	; 0x70
 8003596:	4b5e      	ldr	r3, [pc, #376]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	4a5d      	ldr	r2, [pc, #372]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6713      	str	r3, [r2, #112]	; 0x70
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0x358>
 80035a4:	4b5a      	ldr	r3, [pc, #360]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	4a59      	ldr	r2, [pc, #356]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	6713      	str	r3, [r2, #112]	; 0x70
 80035b0:	4b57      	ldr	r3, [pc, #348]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	4a56      	ldr	r2, [pc, #344]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80035b6:	f023 0304 	bic.w	r3, r3, #4
 80035ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d015      	beq.n	80035f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c4:	f7fd fa3a 	bl	8000a3c <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ca:	e00a      	b.n	80035e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035cc:	f7fd fa36 	bl	8000a3c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e0d7      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e2:	4b4b      	ldr	r3, [pc, #300]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0ee      	beq.n	80035cc <HAL_RCC_OscConfig+0x368>
 80035ee:	e014      	b.n	800361a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fd fa24 	bl	8000a3c <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fd fa20 	bl	8000a3c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0c1      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360e:	4b40      	ldr	r3, [pc, #256]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1ee      	bne.n	80035f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800361a:	7dfb      	ldrb	r3, [r7, #23]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d105      	bne.n	800362c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003620:	4b3b      	ldr	r3, [pc, #236]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	4a3a      	ldr	r2, [pc, #232]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80ad 	beq.w	8003790 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003636:	4b36      	ldr	r3, [pc, #216]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b08      	cmp	r3, #8
 8003640:	d060      	beq.n	8003704 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d145      	bne.n	80036d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	4b33      	ldr	r3, [pc, #204]	; (8003718 <HAL_RCC_OscConfig+0x4b4>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fd f9f4 	bl	8000a3c <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003658:	f7fd f9f0 	bl	8000a3c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e093      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	4b29      	ldr	r3, [pc, #164]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69da      	ldr	r2, [r3, #28]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	019b      	lsls	r3, r3, #6
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	3b01      	subs	r3, #1
 8003690:	041b      	lsls	r3, r3, #16
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	061b      	lsls	r3, r3, #24
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	071b      	lsls	r3, r3, #28
 80036a2:	491b      	ldr	r1, [pc, #108]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <HAL_RCC_OscConfig+0x4b4>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fd f9c5 	bl	8000a3c <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b6:	f7fd f9c1 	bl	8000a3c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e064      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x452>
 80036d4:	e05c      	b.n	8003790 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_RCC_OscConfig+0x4b4>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7fd f9ae 	bl	8000a3c <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fd f9aa 	bl	8000a3c <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e04d      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_RCC_OscConfig+0x4ac>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x480>
 8003702:	e045      	b.n	8003790 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d107      	bne.n	800371c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e040      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
 8003710:	40023800 	.word	0x40023800
 8003714:	40007000 	.word	0x40007000
 8003718:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800371c:	4b1f      	ldr	r3, [pc, #124]	; (800379c <HAL_RCC_OscConfig+0x538>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d030      	beq.n	800378c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d129      	bne.n	800378c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003742:	429a      	cmp	r2, r3
 8003744:	d122      	bne.n	800378c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800374c:	4013      	ands	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003752:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003754:	4293      	cmp	r3, r2
 8003756:	d119      	bne.n	800378c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	3b01      	subs	r3, #1
 8003766:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d10f      	bne.n	800378c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d107      	bne.n	800378c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800

080037a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e03f      	b.n	8003832 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd f81a 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	; 0x24
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f829 	bl	800383c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800383c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003840:	b0c0      	sub	sp, #256	; 0x100
 8003842:	af00      	add	r7, sp, #0
 8003844:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003858:	68d9      	ldr	r1, [r3, #12]
 800385a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	ea40 0301 	orr.w	r3, r0, r1
 8003864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	431a      	orrs	r2, r3
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	431a      	orrs	r2, r3
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003894:	f021 010c 	bic.w	r1, r1, #12
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038a2:	430b      	orrs	r3, r1
 80038a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b6:	6999      	ldr	r1, [r3, #24]
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	ea40 0301 	orr.w	r3, r0, r1
 80038c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4b8f      	ldr	r3, [pc, #572]	; (8003b08 <UART_SetConfig+0x2cc>)
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d005      	beq.n	80038dc <UART_SetConfig+0xa0>
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4b8d      	ldr	r3, [pc, #564]	; (8003b0c <UART_SetConfig+0x2d0>)
 80038d8:	429a      	cmp	r2, r3
 80038da:	d104      	bne.n	80038e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038dc:	f7fe ff54 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 80038e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038e4:	e003      	b.n	80038ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038e6:	f7fe ff3b 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 80038ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f8:	f040 810c 	bne.w	8003b14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003900:	2200      	movs	r2, #0
 8003902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003906:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800390a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800390e:	4622      	mov	r2, r4
 8003910:	462b      	mov	r3, r5
 8003912:	1891      	adds	r1, r2, r2
 8003914:	65b9      	str	r1, [r7, #88]	; 0x58
 8003916:	415b      	adcs	r3, r3
 8003918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800391a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800391e:	4621      	mov	r1, r4
 8003920:	eb12 0801 	adds.w	r8, r2, r1
 8003924:	4629      	mov	r1, r5
 8003926:	eb43 0901 	adc.w	r9, r3, r1
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800393a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800393e:	4690      	mov	r8, r2
 8003940:	4699      	mov	r9, r3
 8003942:	4623      	mov	r3, r4
 8003944:	eb18 0303 	adds.w	r3, r8, r3
 8003948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800394c:	462b      	mov	r3, r5
 800394e:	eb49 0303 	adc.w	r3, r9, r3
 8003952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003962:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800396a:	460b      	mov	r3, r1
 800396c:	18db      	adds	r3, r3, r3
 800396e:	653b      	str	r3, [r7, #80]	; 0x50
 8003970:	4613      	mov	r3, r2
 8003972:	eb42 0303 	adc.w	r3, r2, r3
 8003976:	657b      	str	r3, [r7, #84]	; 0x54
 8003978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800397c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003980:	f7fc fc40 	bl	8000204 <__aeabi_uldivmod>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4b61      	ldr	r3, [pc, #388]	; (8003b10 <UART_SetConfig+0x2d4>)
 800398a:	fba3 2302 	umull	r2, r3, r3, r2
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	011c      	lsls	r4, r3, #4
 8003992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003996:	2200      	movs	r2, #0
 8003998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800399c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039a4:	4642      	mov	r2, r8
 80039a6:	464b      	mov	r3, r9
 80039a8:	1891      	adds	r1, r2, r2
 80039aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80039ac:	415b      	adcs	r3, r3
 80039ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039b4:	4641      	mov	r1, r8
 80039b6:	eb12 0a01 	adds.w	sl, r2, r1
 80039ba:	4649      	mov	r1, r9
 80039bc:	eb43 0b01 	adc.w	fp, r3, r1
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039d4:	4692      	mov	sl, r2
 80039d6:	469b      	mov	fp, r3
 80039d8:	4643      	mov	r3, r8
 80039da:	eb1a 0303 	adds.w	r3, sl, r3
 80039de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039e2:	464b      	mov	r3, r9
 80039e4:	eb4b 0303 	adc.w	r3, fp, r3
 80039e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a00:	460b      	mov	r3, r1
 8003a02:	18db      	adds	r3, r3, r3
 8003a04:	643b      	str	r3, [r7, #64]	; 0x40
 8003a06:	4613      	mov	r3, r2
 8003a08:	eb42 0303 	adc.w	r3, r2, r3
 8003a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a16:	f7fc fbf5 	bl	8000204 <__aeabi_uldivmod>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4611      	mov	r1, r2
 8003a20:	4b3b      	ldr	r3, [pc, #236]	; (8003b10 <UART_SetConfig+0x2d4>)
 8003a22:	fba3 2301 	umull	r2, r3, r3, r1
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	2264      	movs	r2, #100	; 0x64
 8003a2a:	fb02 f303 	mul.w	r3, r2, r3
 8003a2e:	1acb      	subs	r3, r1, r3
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a36:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <UART_SetConfig+0x2d4>)
 8003a38:	fba3 2302 	umull	r2, r3, r3, r2
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a44:	441c      	add	r4, r3
 8003a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a58:	4642      	mov	r2, r8
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	1891      	adds	r1, r2, r2
 8003a5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a60:	415b      	adcs	r3, r3
 8003a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a68:	4641      	mov	r1, r8
 8003a6a:	1851      	adds	r1, r2, r1
 8003a6c:	6339      	str	r1, [r7, #48]	; 0x30
 8003a6e:	4649      	mov	r1, r9
 8003a70:	414b      	adcs	r3, r1
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a80:	4659      	mov	r1, fp
 8003a82:	00cb      	lsls	r3, r1, #3
 8003a84:	4651      	mov	r1, sl
 8003a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a8a:	4651      	mov	r1, sl
 8003a8c:	00ca      	lsls	r2, r1, #3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	4619      	mov	r1, r3
 8003a92:	4603      	mov	r3, r0
 8003a94:	4642      	mov	r2, r8
 8003a96:	189b      	adds	r3, r3, r2
 8003a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a9c:	464b      	mov	r3, r9
 8003a9e:	460a      	mov	r2, r1
 8003aa0:	eb42 0303 	adc.w	r3, r2, r3
 8003aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ab4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003abc:	460b      	mov	r3, r1
 8003abe:	18db      	adds	r3, r3, r3
 8003ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	eb42 0303 	adc.w	r3, r2, r3
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ad2:	f7fc fb97 	bl	8000204 <__aeabi_uldivmod>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <UART_SetConfig+0x2d4>)
 8003adc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	2164      	movs	r1, #100	; 0x64
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	3332      	adds	r3, #50	; 0x32
 8003aee:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <UART_SetConfig+0x2d4>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	095b      	lsrs	r3, r3, #5
 8003af6:	f003 0207 	and.w	r2, r3, #7
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4422      	add	r2, r4
 8003b02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b04:	e106      	b.n	8003d14 <UART_SetConfig+0x4d8>
 8003b06:	bf00      	nop
 8003b08:	40011000 	.word	0x40011000
 8003b0c:	40011400 	.word	0x40011400
 8003b10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b26:	4642      	mov	r2, r8
 8003b28:	464b      	mov	r3, r9
 8003b2a:	1891      	adds	r1, r2, r2
 8003b2c:	6239      	str	r1, [r7, #32]
 8003b2e:	415b      	adcs	r3, r3
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
 8003b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b36:	4641      	mov	r1, r8
 8003b38:	1854      	adds	r4, r2, r1
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	eb43 0501 	adc.w	r5, r3, r1
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	00eb      	lsls	r3, r5, #3
 8003b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b4e:	00e2      	lsls	r2, r4, #3
 8003b50:	4614      	mov	r4, r2
 8003b52:	461d      	mov	r5, r3
 8003b54:	4643      	mov	r3, r8
 8003b56:	18e3      	adds	r3, r4, r3
 8003b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b5c:	464b      	mov	r3, r9
 8003b5e:	eb45 0303 	adc.w	r3, r5, r3
 8003b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b82:	4629      	mov	r1, r5
 8003b84:	008b      	lsls	r3, r1, #2
 8003b86:	4621      	mov	r1, r4
 8003b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	008a      	lsls	r2, r1, #2
 8003b90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b94:	f7fc fb36 	bl	8000204 <__aeabi_uldivmod>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4b60      	ldr	r3, [pc, #384]	; (8003d20 <UART_SetConfig+0x4e4>)
 8003b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	011c      	lsls	r4, r3, #4
 8003ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bb8:	4642      	mov	r2, r8
 8003bba:	464b      	mov	r3, r9
 8003bbc:	1891      	adds	r1, r2, r2
 8003bbe:	61b9      	str	r1, [r7, #24]
 8003bc0:	415b      	adcs	r3, r3
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bc8:	4641      	mov	r1, r8
 8003bca:	1851      	adds	r1, r2, r1
 8003bcc:	6139      	str	r1, [r7, #16]
 8003bce:	4649      	mov	r1, r9
 8003bd0:	414b      	adcs	r3, r1
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003be0:	4659      	mov	r1, fp
 8003be2:	00cb      	lsls	r3, r1, #3
 8003be4:	4651      	mov	r1, sl
 8003be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bea:	4651      	mov	r1, sl
 8003bec:	00ca      	lsls	r2, r1, #3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	4642      	mov	r2, r8
 8003bf6:	189b      	adds	r3, r3, r2
 8003bf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bfc:	464b      	mov	r3, r9
 8003bfe:	460a      	mov	r2, r1
 8003c00:	eb42 0303 	adc.w	r3, r2, r3
 8003c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c20:	4649      	mov	r1, r9
 8003c22:	008b      	lsls	r3, r1, #2
 8003c24:	4641      	mov	r1, r8
 8003c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c2a:	4641      	mov	r1, r8
 8003c2c:	008a      	lsls	r2, r1, #2
 8003c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c32:	f7fc fae7 	bl	8000204 <__aeabi_uldivmod>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4b38      	ldr	r3, [pc, #224]	; (8003d20 <UART_SetConfig+0x4e4>)
 8003c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2264      	movs	r2, #100	; 0x64
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	1acb      	subs	r3, r1, r3
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	3332      	adds	r3, #50	; 0x32
 8003c50:	4a33      	ldr	r2, [pc, #204]	; (8003d20 <UART_SetConfig+0x4e4>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c5c:	441c      	add	r4, r3
 8003c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c62:	2200      	movs	r2, #0
 8003c64:	673b      	str	r3, [r7, #112]	; 0x70
 8003c66:	677a      	str	r2, [r7, #116]	; 0x74
 8003c68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	464b      	mov	r3, r9
 8003c70:	1891      	adds	r1, r2, r2
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	415b      	adcs	r3, r3
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	1851      	adds	r1, r2, r1
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	4649      	mov	r1, r9
 8003c84:	414b      	adcs	r3, r1
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c94:	4659      	mov	r1, fp
 8003c96:	00cb      	lsls	r3, r1, #3
 8003c98:	4651      	mov	r1, sl
 8003c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c9e:	4651      	mov	r1, sl
 8003ca0:	00ca      	lsls	r2, r1, #3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	4642      	mov	r2, r8
 8003caa:	189b      	adds	r3, r3, r2
 8003cac:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cae:	464b      	mov	r3, r9
 8003cb0:	460a      	mov	r2, r1
 8003cb2:	eb42 0303 	adc.w	r3, r2, r3
 8003cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8003cc2:	667a      	str	r2, [r7, #100]	; 0x64
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	008b      	lsls	r3, r1, #2
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cda:	4641      	mov	r1, r8
 8003cdc:	008a      	lsls	r2, r1, #2
 8003cde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ce2:	f7fc fa8f 	bl	8000204 <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <UART_SetConfig+0x4e4>)
 8003cec:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	2164      	movs	r1, #100	; 0x64
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	3332      	adds	r3, #50	; 0x32
 8003cfe:	4a08      	ldr	r2, [pc, #32]	; (8003d20 <UART_SetConfig+0x4e4>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	f003 020f 	and.w	r2, r3, #15
 8003d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4422      	add	r2, r4
 8003d12:	609a      	str	r2, [r3, #8]
}
 8003d14:	bf00      	nop
 8003d16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d20:	51eb851f 	.word	0x51eb851f

08003d24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d24:	b084      	sub	sp, #16
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	f107 001c 	add.w	r0, r7, #28
 8003d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d122      	bne.n	8003d82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d105      	bne.n	8003d76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f001 fbe8 	bl	800554c <USB_CoreReset>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	73fb      	strb	r3, [r7, #15]
 8003d80:	e01a      	b.n	8003db8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f001 fbdc 	bl	800554c <USB_CoreReset>
 8003d94:	4603      	mov	r3, r0
 8003d96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38
 8003daa:	e005      	b.n	8003db8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d10b      	bne.n	8003dd6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f043 0206 	orr.w	r2, r3, #6
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f043 0220 	orr.w	r2, r3, #32
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003de2:	b004      	add	sp, #16
 8003de4:	4770      	bx	lr
	...

08003de8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	4613      	mov	r3, r2
 8003df4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d165      	bne.n	8003ec8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4a41      	ldr	r2, [pc, #260]	; (8003f04 <USB_SetTurnaroundTime+0x11c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d906      	bls.n	8003e12 <USB_SetTurnaroundTime+0x2a>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4a40      	ldr	r2, [pc, #256]	; (8003f08 <USB_SetTurnaroundTime+0x120>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d202      	bcs.n	8003e12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e0c:	230f      	movs	r3, #15
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	e062      	b.n	8003ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4a3c      	ldr	r2, [pc, #240]	; (8003f08 <USB_SetTurnaroundTime+0x120>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d306      	bcc.n	8003e28 <USB_SetTurnaroundTime+0x40>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4a3b      	ldr	r2, [pc, #236]	; (8003f0c <USB_SetTurnaroundTime+0x124>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d202      	bcs.n	8003e28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e22:	230e      	movs	r3, #14
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e057      	b.n	8003ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4a38      	ldr	r2, [pc, #224]	; (8003f0c <USB_SetTurnaroundTime+0x124>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d306      	bcc.n	8003e3e <USB_SetTurnaroundTime+0x56>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4a37      	ldr	r2, [pc, #220]	; (8003f10 <USB_SetTurnaroundTime+0x128>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d202      	bcs.n	8003e3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e38:	230d      	movs	r3, #13
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	e04c      	b.n	8003ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	4a33      	ldr	r2, [pc, #204]	; (8003f10 <USB_SetTurnaroundTime+0x128>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d306      	bcc.n	8003e54 <USB_SetTurnaroundTime+0x6c>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4a32      	ldr	r2, [pc, #200]	; (8003f14 <USB_SetTurnaroundTime+0x12c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d802      	bhi.n	8003e54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e4e:	230c      	movs	r3, #12
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e041      	b.n	8003ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4a2f      	ldr	r2, [pc, #188]	; (8003f14 <USB_SetTurnaroundTime+0x12c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d906      	bls.n	8003e6a <USB_SetTurnaroundTime+0x82>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4a2e      	ldr	r2, [pc, #184]	; (8003f18 <USB_SetTurnaroundTime+0x130>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d802      	bhi.n	8003e6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e64:	230b      	movs	r3, #11
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	e036      	b.n	8003ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4a2a      	ldr	r2, [pc, #168]	; (8003f18 <USB_SetTurnaroundTime+0x130>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d906      	bls.n	8003e80 <USB_SetTurnaroundTime+0x98>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4a29      	ldr	r2, [pc, #164]	; (8003f1c <USB_SetTurnaroundTime+0x134>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d802      	bhi.n	8003e80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e7a:	230a      	movs	r3, #10
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	e02b      	b.n	8003ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4a26      	ldr	r2, [pc, #152]	; (8003f1c <USB_SetTurnaroundTime+0x134>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d906      	bls.n	8003e96 <USB_SetTurnaroundTime+0xae>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4a25      	ldr	r2, [pc, #148]	; (8003f20 <USB_SetTurnaroundTime+0x138>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d202      	bcs.n	8003e96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003e90:	2309      	movs	r3, #9
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	e020      	b.n	8003ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4a21      	ldr	r2, [pc, #132]	; (8003f20 <USB_SetTurnaroundTime+0x138>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d306      	bcc.n	8003eac <USB_SetTurnaroundTime+0xc4>
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4a20      	ldr	r2, [pc, #128]	; (8003f24 <USB_SetTurnaroundTime+0x13c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d802      	bhi.n	8003eac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	e015      	b.n	8003ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4a1d      	ldr	r2, [pc, #116]	; (8003f24 <USB_SetTurnaroundTime+0x13c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d906      	bls.n	8003ec2 <USB_SetTurnaroundTime+0xda>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4a1c      	ldr	r2, [pc, #112]	; (8003f28 <USB_SetTurnaroundTime+0x140>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d202      	bcs.n	8003ec2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ebc:	2307      	movs	r3, #7
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	e00a      	b.n	8003ed8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003ec2:	2306      	movs	r3, #6
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	e007      	b.n	8003ed8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003ece:	2309      	movs	r3, #9
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e001      	b.n	8003ed8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ed4:	2309      	movs	r3, #9
 8003ed6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	029b      	lsls	r3, r3, #10
 8003eec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	00d8acbf 	.word	0x00d8acbf
 8003f08:	00e4e1c0 	.word	0x00e4e1c0
 8003f0c:	00f42400 	.word	0x00f42400
 8003f10:	01067380 	.word	0x01067380
 8003f14:	011a499f 	.word	0x011a499f
 8003f18:	01312cff 	.word	0x01312cff
 8003f1c:	014ca43f 	.word	0x014ca43f
 8003f20:	016e3600 	.word	0x016e3600
 8003f24:	01a6ab1f 	.word	0x01a6ab1f
 8003f28:	01e84800 	.word	0x01e84800

08003f2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f043 0201 	orr.w	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f023 0201 	bic.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d115      	bne.n	8003fbe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f9e:	2001      	movs	r0, #1
 8003fa0:	f7fc fd58 	bl	8000a54 <HAL_Delay>
      ms++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f001 fa3f 	bl	800542e <USB_GetMode>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d01e      	beq.n	8003ff4 <USB_SetCurrentMode+0x84>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b31      	cmp	r3, #49	; 0x31
 8003fba:	d9f0      	bls.n	8003f9e <USB_SetCurrentMode+0x2e>
 8003fbc:	e01a      	b.n	8003ff4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d115      	bne.n	8003ff0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	f7fc fd3f 	bl	8000a54 <HAL_Delay>
      ms++;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f001 fa26 	bl	800542e <USB_GetMode>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <USB_SetCurrentMode+0x84>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b31      	cmp	r3, #49	; 0x31
 8003fec:	d9f0      	bls.n	8003fd0 <USB_SetCurrentMode+0x60>
 8003fee:	e001      	b.n	8003ff4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e005      	b.n	8004000 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b32      	cmp	r3, #50	; 0x32
 8003ff8:	d101      	bne.n	8003ffe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004008:	b084      	sub	sp, #16
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	e009      	b.n	800403c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	3340      	adds	r3, #64	; 0x40
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	2200      	movs	r2, #0
 8004034:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	3301      	adds	r3, #1
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b0e      	cmp	r3, #14
 8004040:	d9f2      	bls.n	8004028 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d11c      	bne.n	8004082 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004056:	f043 0302 	orr.w	r3, r3, #2
 800405a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e005      	b.n	800408e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004094:	461a      	mov	r2, r3
 8004096:	2300      	movs	r3, #0
 8004098:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a0:	4619      	mov	r1, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a8:	461a      	mov	r2, r3
 80040aa:	680b      	ldr	r3, [r1, #0]
 80040ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d10c      	bne.n	80040ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d104      	bne.n	80040c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040ba:	2100      	movs	r1, #0
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f965 	bl	800438c <USB_SetDevSpeed>
 80040c2:	e008      	b.n	80040d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040c4:	2101      	movs	r1, #1
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f960 	bl	800438c <USB_SetDevSpeed>
 80040cc:	e003      	b.n	80040d6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040ce:	2103      	movs	r1, #3
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f95b 	bl	800438c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040d6:	2110      	movs	r1, #16
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f8f3 	bl	80042c4 <USB_FlushTxFifo>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f91f 	bl	800432c <USB_FlushRxFifo>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fe:	461a      	mov	r2, r3
 8004100:	2300      	movs	r3, #0
 8004102:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410a:	461a      	mov	r2, r3
 800410c:	2300      	movs	r3, #0
 800410e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004116:	461a      	mov	r2, r3
 8004118:	2300      	movs	r3, #0
 800411a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	e043      	b.n	80041aa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004134:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004138:	d118      	bne.n	800416c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414c:	461a      	mov	r2, r3
 800414e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	e013      	b.n	800417e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004162:	461a      	mov	r2, r3
 8004164:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e008      	b.n	800417e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004178:	461a      	mov	r2, r3
 800417a:	2300      	movs	r3, #0
 800417c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418a:	461a      	mov	r2, r3
 800418c:	2300      	movs	r3, #0
 800418e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419c:	461a      	mov	r2, r3
 800419e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	3301      	adds	r3, #1
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d3b7      	bcc.n	8004122 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	e043      	b.n	8004240 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041ce:	d118      	bne.n	8004202 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10a      	bne.n	80041ec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e2:	461a      	mov	r2, r3
 80041e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e013      	b.n	8004214 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	461a      	mov	r2, r3
 80041fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	e008      	b.n	8004214 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420e:	461a      	mov	r2, r3
 8004210:	2300      	movs	r3, #0
 8004212:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004220:	461a      	mov	r2, r3
 8004222:	2300      	movs	r3, #0
 8004224:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	461a      	mov	r2, r3
 8004234:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004238:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	3301      	adds	r3, #1
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	429a      	cmp	r2, r3
 8004246:	d3b7      	bcc.n	80041b8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800425a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004268:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	2b00      	cmp	r3, #0
 800426e:	d105      	bne.n	800427c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	f043 0210 	orr.w	r2, r3, #16
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699a      	ldr	r2, [r3, #24]
 8004280:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <USB_DevInit+0x2b8>)
 8004282:	4313      	orrs	r3, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	f043 0208 	orr.w	r2, r3, #8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800429a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d107      	bne.n	80042b0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042bc:	b004      	add	sp, #16
 80042be:	4770      	bx	lr
 80042c0:	803c3800 	.word	0x803c3800

080042c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3301      	adds	r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4a13      	ldr	r2, [pc, #76]	; (8004328 <USB_FlushTxFifo+0x64>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e01b      	b.n	800431c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	daf2      	bge.n	80042d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	019b      	lsls	r3, r3, #6
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3301      	adds	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4a08      	ldr	r2, [pc, #32]	; (8004328 <USB_FlushTxFifo+0x64>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d901      	bls.n	800430e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e006      	b.n	800431c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b20      	cmp	r3, #32
 8004318:	d0f0      	beq.n	80042fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	00030d40 	.word	0x00030d40

0800432c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3301      	adds	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a11      	ldr	r2, [pc, #68]	; (8004388 <USB_FlushRxFifo+0x5c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e018      	b.n	800437c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	daf2      	bge.n	8004338 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2210      	movs	r2, #16
 800435a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3301      	adds	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4a08      	ldr	r2, [pc, #32]	; (8004388 <USB_FlushRxFifo+0x5c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e006      	b.n	800437c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b10      	cmp	r3, #16
 8004378:	d0f0      	beq.n	800435c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	00030d40 	.word	0x00030d40

0800438c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	68f9      	ldr	r1, [r7, #12]
 80043a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043ac:	4313      	orrs	r3, r2
 80043ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80043be:	b480      	push	{r7}
 80043c0:	b087      	sub	sp, #28
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 0306 	and.w	r3, r3, #6
 80043d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]
 80043e2:	e00a      	b.n	80043fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d002      	beq.n	80043f0 <USB_GetDevSpeed+0x32>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b06      	cmp	r3, #6
 80043ee:	d102      	bne.n	80043f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80043f0:	2302      	movs	r3, #2
 80043f2:	75fb      	strb	r3, [r7, #23]
 80043f4:	e001      	b.n	80043fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80043f6:	230f      	movs	r3, #15
 80043f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	785b      	ldrb	r3, [r3, #1]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d13a      	bne.n	800449a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	2101      	movs	r1, #1
 8004436:	fa01 f303 	lsl.w	r3, r1, r3
 800443a:	b29b      	uxth	r3, r3
 800443c:	68f9      	ldr	r1, [r7, #12]
 800443e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004442:	4313      	orrs	r3, r2
 8004444:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d155      	bne.n	8004508 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	791b      	ldrb	r3, [r3, #4]
 8004476:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004478:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	059b      	lsls	r3, r3, #22
 800447e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004480:	4313      	orrs	r3, r2
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	0151      	lsls	r1, r2, #5
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	440a      	add	r2, r1
 800448a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	e036      	b.n	8004508 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a0:	69da      	ldr	r2, [r3, #28]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	2101      	movs	r1, #1
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	041b      	lsls	r3, r3, #16
 80044b2:	68f9      	ldr	r1, [r7, #12]
 80044b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d11a      	bne.n	8004508 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	791b      	ldrb	r3, [r3, #4]
 80044ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044ee:	430b      	orrs	r3, r1
 80044f0:	4313      	orrs	r3, r2
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	0151      	lsls	r1, r2, #5
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	440a      	add	r2, r1
 80044fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004506:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d161      	bne.n	80045f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800454a:	d11f      	bne.n	800458c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	0151      	lsls	r1, r2, #5
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	440a      	add	r2, r1
 8004562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004566:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800456a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	0151      	lsls	r1, r2, #5
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	440a      	add	r2, r1
 8004582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004586:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800458a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	2101      	movs	r1, #1
 800459e:	fa01 f303 	lsl.w	r3, r1, r3
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	43db      	mvns	r3, r3
 80045a6:	68f9      	ldr	r1, [r7, #12]
 80045a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ac:	4013      	ands	r3, r2
 80045ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	2101      	movs	r1, #1
 80045c2:	fa01 f303 	lsl.w	r3, r1, r3
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	68f9      	ldr	r1, [r7, #12]
 80045cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045d0:	4013      	ands	r3, r2
 80045d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	0159      	lsls	r1, r3, #5
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	440b      	add	r3, r1
 80045ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ee:	4619      	mov	r1, r3
 80045f0:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <USB_DeactivateEndpoint+0x1b0>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]
 80045f6:	e060      	b.n	80046ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800460a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800460e:	d11f      	bne.n	8004650 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	0151      	lsls	r1, r2, #5
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	440a      	add	r2, r1
 8004626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800462a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800462e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	440a      	add	r2, r1
 8004646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800464a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800464e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	2101      	movs	r1, #1
 8004662:	fa01 f303 	lsl.w	r3, r1, r3
 8004666:	041b      	lsls	r3, r3, #16
 8004668:	43db      	mvns	r3, r3
 800466a:	68f9      	ldr	r1, [r7, #12]
 800466c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004670:	4013      	ands	r3, r2
 8004672:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	2101      	movs	r1, #1
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	43db      	mvns	r3, r3
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004694:	4013      	ands	r3, r2
 8004696:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	0159      	lsls	r1, r3, #5
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	440b      	add	r3, r1
 80046ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b2:	4619      	mov	r1, r3
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <USB_DeactivateEndpoint+0x1b4>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	ec337800 	.word	0xec337800
 80046cc:	eff37800 	.word	0xeff37800

080046d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	; 0x28
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	4613      	mov	r3, r2
 80046dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	f040 815c 	bne.w	80049aa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d132      	bne.n	8004760 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	0151      	lsls	r1, r2, #5
 800470c:	69fa      	ldr	r2, [r7, #28]
 800470e:	440a      	add	r2, r1
 8004710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004714:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004718:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800471c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	0151      	lsls	r1, r2, #5
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	440a      	add	r2, r1
 8004734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004738:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800473c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	440a      	add	r2, r1
 8004754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004758:	0cdb      	lsrs	r3, r3, #19
 800475a:	04db      	lsls	r3, r3, #19
 800475c:	6113      	str	r3, [r2, #16]
 800475e:	e074      	b.n	800484a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	0151      	lsls	r1, r2, #5
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	440a      	add	r2, r1
 8004776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800477a:	0cdb      	lsrs	r3, r3, #19
 800477c:	04db      	lsls	r3, r3, #19
 800477e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	0151      	lsls	r1, r2, #5
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	440a      	add	r2, r1
 8004796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800479a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800479e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6999      	ldr	r1, [r3, #24]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	440b      	add	r3, r1
 80047bc:	1e59      	subs	r1, r3, #1
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80047c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80047c8:	4b9d      	ldr	r3, [pc, #628]	; (8004a40 <USB_EPStartXfer+0x370>)
 80047ca:	400b      	ands	r3, r1
 80047cc:	69b9      	ldr	r1, [r7, #24]
 80047ce:	0148      	lsls	r0, r1, #5
 80047d0:	69f9      	ldr	r1, [r7, #28]
 80047d2:	4401      	add	r1, r0
 80047d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047d8:	4313      	orrs	r3, r2
 80047da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f2:	69b9      	ldr	r1, [r7, #24]
 80047f4:	0148      	lsls	r0, r1, #5
 80047f6:	69f9      	ldr	r1, [r7, #28]
 80047f8:	4401      	add	r1, r0
 80047fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047fe:	4313      	orrs	r3, r2
 8004800:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	791b      	ldrb	r3, [r3, #4]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d11f      	bne.n	800484a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	0151      	lsls	r1, r2, #5
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	440a      	add	r2, r1
 8004820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004824:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004828:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	0151      	lsls	r1, r2, #5
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	440a      	add	r2, r1
 8004840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004844:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004848:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d14b      	bne.n	80048e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d009      	beq.n	800486c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004864:	461a      	mov	r2, r3
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	791b      	ldrb	r3, [r3, #4]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d128      	bne.n	80048c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d110      	bne.n	80048a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	0151      	lsls	r1, r2, #5
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	440a      	add	r2, r1
 800489a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	e00f      	b.n	80048c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	0151      	lsls	r1, r2, #5
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	440a      	add	r2, r1
 80048bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	0151      	lsls	r1, r2, #5
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	440a      	add	r2, r1
 80048dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	e133      	b.n	8004b50 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	0151      	lsls	r1, r2, #5
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	440a      	add	r2, r1
 80048fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004902:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004906:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	791b      	ldrb	r3, [r3, #4]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d015      	beq.n	800493c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 811b 	beq.w	8004b50 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	2101      	movs	r1, #1
 800492c:	fa01 f303 	lsl.w	r3, r1, r3
 8004930:	69f9      	ldr	r1, [r7, #28]
 8004932:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004936:	4313      	orrs	r3, r2
 8004938:	634b      	str	r3, [r1, #52]	; 0x34
 800493a:	e109      	b.n	8004b50 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004948:	2b00      	cmp	r3, #0
 800494a:	d110      	bne.n	800496e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	440a      	add	r2, r1
 8004962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004966:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	e00f      	b.n	800498e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	0151      	lsls	r1, r2, #5
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	440a      	add	r2, r1
 8004984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6919      	ldr	r1, [r3, #16]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	b298      	uxth	r0, r3
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	4603      	mov	r3, r0
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fade 	bl	8004f64 <USB_WritePacket>
 80049a8:	e0d2      	b.n	8004b50 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c4:	0cdb      	lsrs	r3, r3, #19
 80049c6:	04db      	lsls	r3, r3, #19
 80049c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d126      	bne.n	8004a44 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a0c:	69b9      	ldr	r1, [r7, #24]
 8004a0e:	0148      	lsls	r0, r1, #5
 8004a10:	69f9      	ldr	r1, [r7, #28]
 8004a12:	4401      	add	r1, r0
 8004a14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a3a:	6113      	str	r3, [r2, #16]
 8004a3c:	e03a      	b.n	8004ab4 <USB_EPStartXfer+0x3e4>
 8004a3e:	bf00      	nop
 8004a40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	1e5a      	subs	r2, r3, #1
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	8afa      	ldrh	r2, [r7, #22]
 8004a60:	fb03 f202 	mul.w	r2, r3, r2
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	8afb      	ldrh	r3, [r7, #22]
 8004a78:	04d9      	lsls	r1, r3, #19
 8004a7a:	4b38      	ldr	r3, [pc, #224]	; (8004b5c <USB_EPStartXfer+0x48c>)
 8004a7c:	400b      	ands	r3, r1
 8004a7e:	69b9      	ldr	r1, [r7, #24]
 8004a80:	0148      	lsls	r0, r1, #5
 8004a82:	69f9      	ldr	r1, [r7, #28]
 8004a84:	4401      	add	r1, r0
 8004a86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa4:	69b9      	ldr	r1, [r7, #24]
 8004aa6:	0148      	lsls	r0, r1, #5
 8004aa8:	69f9      	ldr	r1, [r7, #28]
 8004aaa:	4401      	add	r1, r0
 8004aac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d10d      	bne.n	8004ad6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	6919      	ldr	r1, [r3, #16]
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad2:	460a      	mov	r2, r1
 8004ad4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	791b      	ldrb	r3, [r3, #4]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d128      	bne.n	8004b30 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d110      	bne.n	8004b10 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	0151      	lsls	r1, r2, #5
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	440a      	add	r2, r1
 8004b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e00f      	b.n	8004b30 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3720      	adds	r7, #32
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	1ff80000 	.word	0x1ff80000

08004b60 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	f040 80ce 	bne.w	8004d1e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d132      	bne.n	8004bf0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ba8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	0151      	lsls	r1, r2, #5
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	440a      	add	r2, r1
 8004bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	0151      	lsls	r1, r2, #5
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	440a      	add	r2, r1
 8004be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be8:	0cdb      	lsrs	r3, r3, #19
 8004bea:	04db      	lsls	r3, r3, #19
 8004bec:	6113      	str	r3, [r2, #16]
 8004bee:	e04e      	b.n	8004c8e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	0151      	lsls	r1, r2, #5
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	440a      	add	r2, r1
 8004c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c0a:	0cdb      	lsrs	r3, r3, #19
 8004c0c:	04db      	lsls	r3, r3, #19
 8004c0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c32:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	699a      	ldr	r2, [r3, #24]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d903      	bls.n	8004c48 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	0151      	lsls	r1, r2, #5
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	440a      	add	r2, r1
 8004c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7e:	6939      	ldr	r1, [r7, #16]
 8004c80:	0148      	lsls	r0, r1, #5
 8004c82:	6979      	ldr	r1, [r7, #20]
 8004c84:	4401      	add	r1, r0
 8004c86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d11e      	bne.n	8004cd2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d009      	beq.n	8004cb0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca8:	461a      	mov	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	0151      	lsls	r1, r2, #5
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	440a      	add	r2, r1
 8004cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	e097      	b.n	8004e02 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cf0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 8083 	beq.w	8004e02 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d12:	6979      	ldr	r1, [r7, #20]
 8004d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	634b      	str	r3, [r1, #52]	; 0x34
 8004d1c:	e071      	b.n	8004e02 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	0151      	lsls	r1, r2, #5
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	440a      	add	r2, r1
 8004d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d38:	0cdb      	lsrs	r3, r3, #19
 8004d3a:	04db      	lsls	r3, r3, #19
 8004d3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	0151      	lsls	r1, r2, #5
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	440a      	add	r2, r1
 8004d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d60:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	0151      	lsls	r1, r2, #5
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	440a      	add	r2, r1
 8004d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004db0:	6939      	ldr	r1, [r7, #16]
 8004db2:	0148      	lsls	r0, r1, #5
 8004db4:	6979      	ldr	r1, [r7, #20]
 8004db6:	4401      	add	r1, r0
 8004db8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d10d      	bne.n	8004de2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	6919      	ldr	r1, [r3, #16]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	460a      	mov	r2, r1
 8004de0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	785b      	ldrb	r3, [r3, #1]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d14a      	bne.n	8004ec4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e46:	f040 8086 	bne.w	8004f56 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	7812      	ldrb	r2, [r2, #0]
 8004e5e:	0151      	lsls	r1, r2, #5
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	440a      	add	r2, r1
 8004e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e6c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	7812      	ldrb	r2, [r2, #0]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3301      	adds	r3, #1
 8004e96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d902      	bls.n	8004ea8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ea6:	e056      	b.n	8004f56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ec0:	d0e7      	beq.n	8004e92 <USB_EPStopXfer+0x82>
 8004ec2:	e048      	b.n	8004f56 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004edc:	d13b      	bne.n	8004f56 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	7812      	ldrb	r2, [r2, #0]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f00:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	7812      	ldrb	r2, [r2, #0]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d902      	bls.n	8004f3c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	75fb      	strb	r3, [r7, #23]
          break;
 8004f3a:	e00c      	b.n	8004f56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f54:	d0e7      	beq.n	8004f26 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b089      	sub	sp, #36	; 0x24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	4611      	mov	r1, r2
 8004f70:	461a      	mov	r2, r3
 8004f72:	460b      	mov	r3, r1
 8004f74:	71fb      	strb	r3, [r7, #7]
 8004f76:	4613      	mov	r3, r2
 8004f78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d123      	bne.n	8004fd2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f8a:	88bb      	ldrh	r3, [r7, #4]
 8004f8c:	3303      	adds	r3, #3
 8004f8e:	089b      	lsrs	r3, r3, #2
 8004f90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f92:	2300      	movs	r3, #0
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	e018      	b.n	8004fca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	031a      	lsls	r2, r3, #12
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d3e2      	bcc.n	8004f98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3724      	adds	r7, #36	; 0x24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b08b      	sub	sp, #44	; 0x2c
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004ff6:	88fb      	ldrh	r3, [r7, #6]
 8004ff8:	089b      	lsrs	r3, r3, #2
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005006:	2300      	movs	r3, #0
 8005008:	623b      	str	r3, [r7, #32]
 800500a:	e014      	b.n	8005036 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	601a      	str	r2, [r3, #0]
    pDest++;
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	3301      	adds	r3, #1
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	3301      	adds	r3, #1
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	3301      	adds	r3, #1
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	3301      	adds	r3, #1
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	3301      	adds	r3, #1
 8005034:	623b      	str	r3, [r7, #32]
 8005036:	6a3a      	ldr	r2, [r7, #32]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	429a      	cmp	r2, r3
 800503c:	d3e6      	bcc.n	800500c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800503e:	8bfb      	ldrh	r3, [r7, #30]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01e      	beq.n	8005082 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800504e:	461a      	mov	r2, r3
 8005050:	f107 0310 	add.w	r3, r7, #16
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	fa22 f303 	lsr.w	r3, r2, r3
 8005064:	b2da      	uxtb	r2, r3
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	701a      	strb	r2, [r3, #0]
      i++;
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	3301      	adds	r3, #1
 800506e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	3301      	adds	r3, #1
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005076:	8bfb      	ldrh	r3, [r7, #30]
 8005078:	3b01      	subs	r3, #1
 800507a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800507c:	8bfb      	ldrh	r3, [r7, #30]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1ea      	bne.n	8005058 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005084:	4618      	mov	r0, r3
 8005086:	372c      	adds	r7, #44	; 0x2c
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	785b      	ldrb	r3, [r3, #1]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d12c      	bne.n	8005106 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	db12      	blt.n	80050e4 <USB_EPSetStall+0x54>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00f      	beq.n	80050e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e02b      	b.n	800515e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	db12      	blt.n	800513e <USB_EPSetStall+0xae>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00f      	beq.n	800513e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	440a      	add	r2, r1
 8005134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005138:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800513c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	0151      	lsls	r1, r2, #5
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	440a      	add	r2, r1
 8005154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005158:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800515c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	785b      	ldrb	r3, [r3, #1]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d128      	bne.n	80051da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	440a      	add	r2, r1
 800519e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	791b      	ldrb	r3, [r3, #4]
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d003      	beq.n	80051b8 <USB_EPClearStall+0x4c>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	791b      	ldrb	r3, [r3, #4]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d138      	bne.n	800522a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	e027      	b.n	800522a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	791b      	ldrb	r3, [r3, #4]
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d003      	beq.n	800520a <USB_EPClearStall+0x9e>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	791b      	ldrb	r3, [r3, #4]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d10f      	bne.n	800522a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	440a      	add	r2, r1
 8005220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005228:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005256:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800525a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800526c:	68f9      	ldr	r1, [r7, #12]
 800526e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005272:	4313      	orrs	r3, r2
 8005274:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b2:	f023 0302 	bic.w	r3, r3, #2
 80052b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052e0:	f023 0303 	bic.w	r3, r3, #3
 80052e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052f4:	f043 0302 	orr.w	r3, r3, #2
 80052f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4013      	ands	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005320:	68fb      	ldr	r3, [r7, #12]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	4013      	ands	r3, r2
 8005350:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	0c1b      	lsrs	r3, r3, #16
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	4013      	ands	r3, r2
 8005384:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	b29b      	uxth	r3, r3
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80053a6:	78fb      	ldrb	r3, [r7, #3]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	4013      	ands	r3, r2
 80053c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053c4:	68bb      	ldr	r3, [r7, #8]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b087      	sub	sp, #28
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	460b      	mov	r3, r1
 80053dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80053f6:	78fb      	ldrb	r3, [r7, #3]
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005402:	01db      	lsls	r3, r3, #7
 8005404:	b2db      	uxtb	r3, r3
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4013      	ands	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005420:	68bb      	ldr	r3, [r7, #8]
}
 8005422:	4618      	mov	r0, r3
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f003 0301 	and.w	r3, r3, #1
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800544a:	b480      	push	{r7}
 800544c:	b085      	sub	sp, #20
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005464:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005468:	f023 0307 	bic.w	r3, r3, #7
 800546c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800547c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005480:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	460b      	mov	r3, r1
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	333c      	adds	r3, #60	; 0x3c
 80054a6:	3304      	adds	r3, #4
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4a26      	ldr	r2, [pc, #152]	; (8005548 <USB_EP0_OutStart+0xb8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d90a      	bls.n	80054ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054c4:	d101      	bne.n	80054ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e037      	b.n	800553a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d0:	461a      	mov	r2, r3
 80054d2:	2300      	movs	r3, #0
 80054d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f8:	f043 0318 	orr.w	r3, r3, #24
 80054fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800550c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005510:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005512:	7afb      	ldrb	r3, [r7, #11]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d10f      	bne.n	8005538 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551e:	461a      	mov	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005532:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005536:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	4f54300a 	.word	0x4f54300a

0800554c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	3301      	adds	r3, #1
 800555c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4a13      	ldr	r2, [pc, #76]	; (80055b0 <USB_CoreReset+0x64>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d901      	bls.n	800556a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e01b      	b.n	80055a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	daf2      	bge.n	8005558 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f043 0201 	orr.w	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3301      	adds	r3, #1
 8005586:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4a09      	ldr	r2, [pc, #36]	; (80055b0 <USB_CoreReset+0x64>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d901      	bls.n	8005594 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e006      	b.n	80055a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d0f0      	beq.n	8005582 <USB_CoreReset+0x36>

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	00030d40 	.word	0x00030d40

080055b4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80055c0:	2010      	movs	r0, #16
 80055c2:	f002 f999 	bl	80078f8 <USBD_static_malloc>
 80055c6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	32b0      	adds	r2, #176	; 0xb0
 80055d8:	2100      	movs	r1, #0
 80055da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80055de:	2302      	movs	r3, #2
 80055e0:	e048      	b.n	8005674 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	32b0      	adds	r2, #176	; 0xb0
 80055ec:	68f9      	ldr	r1, [r7, #12]
 80055ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	32b0      	adds	r2, #176	; 0xb0
 80055fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	7c1b      	ldrb	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10d      	bne.n	800562a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800560e:	4b1b      	ldr	r3, [pc, #108]	; (800567c <USBD_HID_Init+0xc8>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	f003 020f 	and.w	r2, r3, #15
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	3326      	adds	r3, #38	; 0x26
 8005624:	2207      	movs	r2, #7
 8005626:	801a      	strh	r2, [r3, #0]
 8005628:	e00c      	b.n	8005644 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800562a:	4b14      	ldr	r3, [pc, #80]	; (800567c <USBD_HID_Init+0xc8>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	f003 020f 	and.w	r2, r3, #15
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	3326      	adds	r3, #38	; 0x26
 8005640:	220a      	movs	r2, #10
 8005642:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005644:	4b0d      	ldr	r3, [pc, #52]	; (800567c <USBD_HID_Init+0xc8>)
 8005646:	7819      	ldrb	r1, [r3, #0]
 8005648:	2304      	movs	r3, #4
 800564a:	2203      	movs	r2, #3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f001 fff4 	bl	800763a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005652:	4b0a      	ldr	r3, [pc, #40]	; (800567c <USBD_HID_Init+0xc8>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	f003 020f 	and.w	r2, r3, #15
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	3324      	adds	r3, #36	; 0x24
 8005668:	2201      	movs	r2, #1
 800566a:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	200000ca 	.word	0x200000ca

08005680 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800568c:	4b1f      	ldr	r3, [pc, #124]	; (800570c <USBD_HID_DeInit+0x8c>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	4619      	mov	r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f001 fff7 	bl	8007686 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005698:	4b1c      	ldr	r3, [pc, #112]	; (800570c <USBD_HID_DeInit+0x8c>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	f003 020f 	and.w	r2, r3, #15
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	3324      	adds	r3, #36	; 0x24
 80056ae:	2200      	movs	r2, #0
 80056b0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80056b2:	4b16      	ldr	r3, [pc, #88]	; (800570c <USBD_HID_DeInit+0x8c>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	f003 020f 	and.w	r2, r3, #15
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	3326      	adds	r3, #38	; 0x26
 80056c8:	2200      	movs	r2, #0
 80056ca:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	32b0      	adds	r2, #176	; 0xb0
 80056d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d011      	beq.n	8005702 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	32b0      	adds	r2, #176	; 0xb0
 80056e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f002 f911 	bl	8007914 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	32b0      	adds	r2, #176	; 0xb0
 80056fc:	2100      	movs	r1, #0
 80056fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	200000ca 	.word	0x200000ca

08005710 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	32b0      	adds	r2, #176	; 0xb0
 8005724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005728:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005738:	2303      	movs	r3, #3
 800573a:	e0e8      	b.n	800590e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005744:	2b00      	cmp	r3, #0
 8005746:	d046      	beq.n	80057d6 <USBD_HID_Setup+0xc6>
 8005748:	2b20      	cmp	r3, #32
 800574a:	f040 80d8 	bne.w	80058fe <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	3b02      	subs	r3, #2
 8005754:	2b09      	cmp	r3, #9
 8005756:	d836      	bhi.n	80057c6 <USBD_HID_Setup+0xb6>
 8005758:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <USBD_HID_Setup+0x50>)
 800575a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575e:	bf00      	nop
 8005760:	080057b7 	.word	0x080057b7
 8005764:	08005797 	.word	0x08005797
 8005768:	080057c7 	.word	0x080057c7
 800576c:	080057c7 	.word	0x080057c7
 8005770:	080057c7 	.word	0x080057c7
 8005774:	080057c7 	.word	0x080057c7
 8005778:	080057c7 	.word	0x080057c7
 800577c:	080057c7 	.word	0x080057c7
 8005780:	080057a5 	.word	0x080057a5
 8005784:	08005789 	.word	0x08005789
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	885b      	ldrh	r3, [r3, #2]
 800578c:	b2db      	uxtb	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	601a      	str	r2, [r3, #0]
          break;
 8005794:	e01e      	b.n	80057d4 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f001 fbcf 	bl	8006f40 <USBD_CtlSendData>
          break;
 80057a2:	e017      	b.n	80057d4 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	885b      	ldrh	r3, [r3, #2]
 80057a8:	0a1b      	lsrs	r3, r3, #8
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	605a      	str	r2, [r3, #4]
          break;
 80057b4:	e00e      	b.n	80057d4 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3304      	adds	r3, #4
 80057ba:	2201      	movs	r2, #1
 80057bc:	4619      	mov	r1, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f001 fbbe 	bl	8006f40 <USBD_CtlSendData>
          break;
 80057c4:	e006      	b.n	80057d4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f001 fb48 	bl	8006e5e <USBD_CtlError>
          ret = USBD_FAIL;
 80057ce:	2303      	movs	r3, #3
 80057d0:	75fb      	strb	r3, [r7, #23]
          break;
 80057d2:	bf00      	nop
      }
      break;
 80057d4:	e09a      	b.n	800590c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	2b0b      	cmp	r3, #11
 80057dc:	f200 8086 	bhi.w	80058ec <USBD_HID_Setup+0x1dc>
 80057e0:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <USBD_HID_Setup+0xd8>)
 80057e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e6:	bf00      	nop
 80057e8:	08005819 	.word	0x08005819
 80057ec:	080058fb 	.word	0x080058fb
 80057f0:	080058ed 	.word	0x080058ed
 80057f4:	080058ed 	.word	0x080058ed
 80057f8:	080058ed 	.word	0x080058ed
 80057fc:	080058ed 	.word	0x080058ed
 8005800:	08005843 	.word	0x08005843
 8005804:	080058ed 	.word	0x080058ed
 8005808:	080058ed 	.word	0x080058ed
 800580c:	080058ed 	.word	0x080058ed
 8005810:	0800589b 	.word	0x0800589b
 8005814:	080058c5 	.word	0x080058c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b03      	cmp	r3, #3
 8005822:	d107      	bne.n	8005834 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005824:	f107 030a 	add.w	r3, r7, #10
 8005828:	2202      	movs	r2, #2
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f001 fb87 	bl	8006f40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005832:	e063      	b.n	80058fc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f001 fb11 	bl	8006e5e <USBD_CtlError>
            ret = USBD_FAIL;
 800583c:	2303      	movs	r3, #3
 800583e:	75fb      	strb	r3, [r7, #23]
          break;
 8005840:	e05c      	b.n	80058fc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	885b      	ldrh	r3, [r3, #2]
 8005846:	0a1b      	lsrs	r3, r3, #8
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b22      	cmp	r3, #34	; 0x22
 800584c:	d108      	bne.n	8005860 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	88db      	ldrh	r3, [r3, #6]
 8005852:	2b4a      	cmp	r3, #74	; 0x4a
 8005854:	bf28      	it	cs
 8005856:	234a      	movcs	r3, #74	; 0x4a
 8005858:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800585a:	4b2f      	ldr	r3, [pc, #188]	; (8005918 <USBD_HID_Setup+0x208>)
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	e015      	b.n	800588c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	885b      	ldrh	r3, [r3, #2]
 8005864:	0a1b      	lsrs	r3, r3, #8
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b21      	cmp	r3, #33	; 0x21
 800586a:	d108      	bne.n	800587e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800586c:	4b2b      	ldr	r3, [pc, #172]	; (800591c <USBD_HID_Setup+0x20c>)
 800586e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	88db      	ldrh	r3, [r3, #6]
 8005874:	2b09      	cmp	r3, #9
 8005876:	bf28      	it	cs
 8005878:	2309      	movcs	r3, #9
 800587a:	82bb      	strh	r3, [r7, #20]
 800587c:	e006      	b.n	800588c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800587e:	6839      	ldr	r1, [r7, #0]
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 faec 	bl	8006e5e <USBD_CtlError>
            ret = USBD_FAIL;
 8005886:	2303      	movs	r3, #3
 8005888:	75fb      	strb	r3, [r7, #23]
            break;
 800588a:	e037      	b.n	80058fc <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800588c:	8abb      	ldrh	r3, [r7, #20]
 800588e:	461a      	mov	r2, r3
 8005890:	6939      	ldr	r1, [r7, #16]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f001 fb54 	bl	8006f40 <USBD_CtlSendData>
          break;
 8005898:	e030      	b.n	80058fc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d107      	bne.n	80058b6 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3308      	adds	r3, #8
 80058aa:	2201      	movs	r2, #1
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f001 fb46 	bl	8006f40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058b4:	e022      	b.n	80058fc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f001 fad0 	bl	8006e5e <USBD_CtlError>
            ret = USBD_FAIL;
 80058be:	2303      	movs	r3, #3
 80058c0:	75fb      	strb	r3, [r7, #23]
          break;
 80058c2:	e01b      	b.n	80058fc <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d106      	bne.n	80058de <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	885b      	ldrh	r3, [r3, #2]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	461a      	mov	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058dc:	e00e      	b.n	80058fc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 fabc 	bl	8006e5e <USBD_CtlError>
            ret = USBD_FAIL;
 80058e6:	2303      	movs	r3, #3
 80058e8:	75fb      	strb	r3, [r7, #23]
          break;
 80058ea:	e007      	b.n	80058fc <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f001 fab5 	bl	8006e5e <USBD_CtlError>
          ret = USBD_FAIL;
 80058f4:	2303      	movs	r3, #3
 80058f6:	75fb      	strb	r3, [r7, #23]
          break;
 80058f8:	e000      	b.n	80058fc <USBD_HID_Setup+0x1ec>
          break;
 80058fa:	bf00      	nop
      }
      break;
 80058fc:	e006      	b.n	800590c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 faac 	bl	8006e5e <USBD_CtlError>
      ret = USBD_FAIL;
 8005906:	2303      	movs	r3, #3
 8005908:	75fb      	strb	r3, [r7, #23]
      break;
 800590a:	bf00      	nop
  }

  return (uint8_t)ret;
 800590c:	7dfb      	ldrb	r3, [r7, #23]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000080 	.word	0x20000080
 800591c:	20000068 	.word	0x20000068

08005920 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005928:	2181      	movs	r1, #129	; 0x81
 800592a:	4809      	ldr	r0, [pc, #36]	; (8005950 <USBD_HID_GetFSCfgDesc+0x30>)
 800592c:	f000 fc35 	bl	800619a <USBD_GetEpDesc>
 8005930:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	220a      	movs	r2, #10
 800593c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2222      	movs	r2, #34	; 0x22
 8005942:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005944:	4b02      	ldr	r3, [pc, #8]	; (8005950 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000044 	.word	0x20000044

08005954 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800595c:	2181      	movs	r1, #129	; 0x81
 800595e:	4809      	ldr	r0, [pc, #36]	; (8005984 <USBD_HID_GetHSCfgDesc+0x30>)
 8005960:	f000 fc1b 	bl	800619a <USBD_GetEpDesc>
 8005964:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2207      	movs	r2, #7
 8005970:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2222      	movs	r2, #34	; 0x22
 8005976:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005978:	4b02      	ldr	r3, [pc, #8]	; (8005984 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000044 	.word	0x20000044

08005988 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005990:	2181      	movs	r1, #129	; 0x81
 8005992:	4809      	ldr	r0, [pc, #36]	; (80059b8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005994:	f000 fc01 	bl	800619a <USBD_GetEpDesc>
 8005998:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	220a      	movs	r2, #10
 80059a4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2222      	movs	r2, #34	; 0x22
 80059aa:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80059ac:	4b02      	ldr	r3, [pc, #8]	; (80059b8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000044 	.word	0x20000044

080059bc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	32b0      	adds	r2, #176	; 0xb0
 80059d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d6:	2200      	movs	r2, #0
 80059d8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	220a      	movs	r2, #10
 80059f4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80059f6:	4b03      	ldr	r3, [pc, #12]	; (8005a04 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	20000074 	.word	0x20000074

08005a08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	4613      	mov	r3, r2
 8005a14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e01f      	b.n	8005a60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	79fa      	ldrb	r2, [r7, #7]
 8005a52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f001 fd89 	bl	800756c <USBD_LL_Init>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e025      	b.n	8005acc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	32ae      	adds	r2, #174	; 0xae
 8005a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00f      	beq.n	8005abc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	32ae      	adds	r2, #174	; 0xae
 8005aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	f107 020e 	add.w	r2, r7, #14
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4798      	blx	r3
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f001 fd91 	bl	8007604 <USBD_LL_Start>
 8005ae2:	4603      	mov	r3, r0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005af4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d009      	beq.n	8005b30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	78fa      	ldrb	r2, [r7, #3]
 8005b26:	4611      	mov	r1, r2
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	460b      	mov	r3, r1
 8005b44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	78fa      	ldrb	r2, [r7, #3]
 8005b54:	4611      	mov	r1, r2
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	4798      	blx	r3
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005b60:	2303      	movs	r3, #3
 8005b62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b7e:	6839      	ldr	r1, [r7, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f001 f932 	bl	8006dea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005b94:	461a      	mov	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d01a      	beq.n	8005be0 <USBD_LL_SetupStage+0x72>
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d822      	bhi.n	8005bf4 <USBD_LL_SetupStage+0x86>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <USBD_LL_SetupStage+0x4a>
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d00a      	beq.n	8005bcc <USBD_LL_SetupStage+0x5e>
 8005bb6:	e01d      	b.n	8005bf4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fb5f 	bl	8006284 <USBD_StdDevReq>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005bca:	e020      	b.n	8005c0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fbc7 	bl	8006368 <USBD_StdItfReq>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8005bde:	e016      	b.n	8005c0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005be6:	4619      	mov	r1, r3
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fc29 	bl	8006440 <USBD_StdEPReq>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf2:	e00c      	b.n	8005c0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	4619      	mov	r1, r3
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f001 fd5e 	bl	80076c4 <USBD_LL_StallEP>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c0c:	bf00      	nop
  }

  return ret;
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	460b      	mov	r3, r1
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005c2a:	7afb      	ldrb	r3, [r7, #11]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d16e      	bne.n	8005d0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	f040 8098 	bne.w	8005d74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d913      	bls.n	8005c78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	1ad2      	subs	r2, r2, r3
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	4293      	cmp	r3, r2
 8005c68:	bf28      	it	cs
 8005c6a:	4613      	movcs	r3, r2
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f001 f991 	bl	8006f98 <USBD_CtlContinueRx>
 8005c76:	e07d      	b.n	8005d74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d014      	beq.n	8005cb0 <USBD_LL_DataOutStage+0x98>
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d81d      	bhi.n	8005cc6 <USBD_LL_DataOutStage+0xae>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <USBD_LL_DataOutStage+0x7c>
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d003      	beq.n	8005c9a <USBD_LL_DataOutStage+0x82>
 8005c92:	e018      	b.n	8005cc6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	75bb      	strb	r3, [r7, #22]
            break;
 8005c98:	e018      	b.n	8005ccc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fa5e 	bl	8006166 <USBD_CoreFindIF>
 8005caa:	4603      	mov	r3, r0
 8005cac:	75bb      	strb	r3, [r7, #22]
            break;
 8005cae:	e00d      	b.n	8005ccc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	4619      	mov	r1, r3
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fa60 	bl	8006180 <USBD_CoreFindEP>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	75bb      	strb	r3, [r7, #22]
            break;
 8005cc4:	e002      	b.n	8005ccc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	75bb      	strb	r3, [r7, #22]
            break;
 8005cca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ccc:	7dbb      	ldrb	r3, [r7, #22]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d119      	bne.n	8005d06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d113      	bne.n	8005d06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005cde:	7dba      	ldrb	r2, [r7, #22]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	32ae      	adds	r2, #174	; 0xae
 8005ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00b      	beq.n	8005d06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005cee:	7dba      	ldrb	r2, [r7, #22]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005cf6:	7dba      	ldrb	r2, [r7, #22]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	32ae      	adds	r2, #174	; 0xae
 8005cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f001 f957 	bl	8006fba <USBD_CtlSendStatus>
 8005d0c:	e032      	b.n	8005d74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005d0e:	7afb      	ldrb	r3, [r7, #11]
 8005d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	4619      	mov	r1, r3
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fa31 	bl	8006180 <USBD_CoreFindEP>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d22:	7dbb      	ldrb	r3, [r7, #22]
 8005d24:	2bff      	cmp	r3, #255	; 0xff
 8005d26:	d025      	beq.n	8005d74 <USBD_LL_DataOutStage+0x15c>
 8005d28:	7dbb      	ldrb	r3, [r7, #22]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d122      	bne.n	8005d74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d117      	bne.n	8005d6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005d3a:	7dba      	ldrb	r2, [r7, #22]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	32ae      	adds	r2, #174	; 0xae
 8005d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00f      	beq.n	8005d6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005d4a:	7dba      	ldrb	r2, [r7, #22]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005d52:	7dba      	ldrb	r2, [r7, #22]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	32ae      	adds	r2, #174	; 0xae
 8005d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	7afa      	ldrb	r2, [r7, #11]
 8005d60:	4611      	mov	r1, r2
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	4798      	blx	r3
 8005d66:	4603      	mov	r3, r0
 8005d68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005d6a:	7dfb      	ldrb	r3, [r7, #23]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	e000      	b.n	8005d76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b086      	sub	sp, #24
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	60f8      	str	r0, [r7, #12]
 8005d86:	460b      	mov	r3, r1
 8005d88:	607a      	str	r2, [r7, #4]
 8005d8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005d8c:	7afb      	ldrb	r3, [r7, #11]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d16f      	bne.n	8005e72 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3314      	adds	r3, #20
 8005d96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d15a      	bne.n	8005e58 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d914      	bls.n	8005dd8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	1ad2      	subs	r2, r2, r3
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f001 f8d6 	bl	8006f76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dca:	2300      	movs	r3, #0
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2100      	movs	r1, #0
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f001 fd21 	bl	8007818 <USBD_LL_PrepareReceive>
 8005dd6:	e03f      	b.n	8005e58 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d11c      	bne.n	8005e1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d316      	bcc.n	8005e1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d20f      	bcs.n	8005e1e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2100      	movs	r1, #0
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f001 f8b7 	bl	8006f76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e10:	2300      	movs	r3, #0
 8005e12:	2200      	movs	r2, #0
 8005e14:	2100      	movs	r1, #0
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f001 fcfe 	bl	8007818 <USBD_LL_PrepareReceive>
 8005e1c:	e01c      	b.n	8005e58 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d10f      	bne.n	8005e4a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e4a:	2180      	movs	r1, #128	; 0x80
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f001 fc39 	bl	80076c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f001 f8c4 	bl	8006fe0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d03a      	beq.n	8005ed8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f7ff fe42 	bl	8005aec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e70:	e032      	b.n	8005ed8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005e72:	7afb      	ldrb	r3, [r7, #11]
 8005e74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 f97f 	bl	8006180 <USBD_CoreFindEP>
 8005e82:	4603      	mov	r3, r0
 8005e84:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
 8005e88:	2bff      	cmp	r3, #255	; 0xff
 8005e8a:	d025      	beq.n	8005ed8 <USBD_LL_DataInStage+0x15a>
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d122      	bne.n	8005ed8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d11c      	bne.n	8005ed8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005e9e:	7dfa      	ldrb	r2, [r7, #23]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	32ae      	adds	r2, #174	; 0xae
 8005ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d014      	beq.n	8005ed8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005eae:	7dfa      	ldrb	r2, [r7, #23]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005eb6:	7dfa      	ldrb	r2, [r7, #23]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	32ae      	adds	r2, #174	; 0xae
 8005ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	7afa      	ldrb	r2, [r7, #11]
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	4798      	blx	r3
 8005eca:	4603      	mov	r3, r0
 8005ecc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005ece:	7dbb      	ldrb	r3, [r7, #22]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ed4:	7dbb      	ldrb	r3, [r7, #22]
 8005ed6:	e000      	b.n	8005eda <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d014      	beq.n	8005f48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00e      	beq.n	8005f48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6852      	ldr	r2, [r2, #4]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	4611      	mov	r1, r2
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	4798      	blx	r3
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005f44:	2303      	movs	r3, #3
 8005f46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f48:	2340      	movs	r3, #64	; 0x40
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 fb73 	bl	800763a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2240      	movs	r2, #64	; 0x40
 8005f60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f64:	2340      	movs	r3, #64	; 0x40
 8005f66:	2200      	movs	r2, #0
 8005f68:	2180      	movs	r1, #128	; 0x80
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f001 fb65 	bl	800763a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2240      	movs	r2, #64	; 0x40
 8005f7a:	621a      	str	r2, [r3, #32]

  return ret;
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	78fa      	ldrb	r2, [r7, #3]
 8005f96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2204      	movs	r2, #4
 8005fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d106      	bne.n	8005ff4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b03      	cmp	r3, #3
 8006014:	d110      	bne.n	8006038 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00b      	beq.n	8006038 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	460b      	mov	r3, r1
 800604c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	32ae      	adds	r2, #174	; 0xae
 8006058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006060:	2303      	movs	r3, #3
 8006062:	e01c      	b.n	800609e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b03      	cmp	r3, #3
 800606e:	d115      	bne.n	800609c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	32ae      	adds	r2, #174	; 0xae
 800607a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00b      	beq.n	800609c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	32ae      	adds	r2, #174	; 0xae
 800608e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	78fa      	ldrb	r2, [r7, #3]
 8006096:	4611      	mov	r1, r2
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	460b      	mov	r3, r1
 80060b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	32ae      	adds	r2, #174	; 0xae
 80060bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e01c      	b.n	8006102 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d115      	bne.n	8006100 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	32ae      	adds	r2, #174	; 0xae
 80060de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00b      	beq.n	8006100 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	32ae      	adds	r2, #174	; 0xae
 80060f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	78fa      	ldrb	r2, [r7, #3]
 80060fa:	4611      	mov	r1, r2
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00e      	beq.n	800615c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6852      	ldr	r2, [r2, #4]
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	4611      	mov	r1, r2
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	4798      	blx	r3
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006158:	2303      	movs	r3, #3
 800615a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	460b      	mov	r3, r1
 8006170:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006172:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006174:	4618      	mov	r0, r3
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800618c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b086      	sub	sp, #24
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	460b      	mov	r3, r1
 80061a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	885b      	ldrh	r3, [r3, #2]
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	429a      	cmp	r2, r3
 80061c0:	d920      	bls.n	8006204 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80061ca:	e013      	b.n	80061f4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80061cc:	f107 030a 	add.w	r3, r7, #10
 80061d0:	4619      	mov	r1, r3
 80061d2:	6978      	ldr	r0, [r7, #20]
 80061d4:	f000 f81b 	bl	800620e <USBD_GetNextDesc>
 80061d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	2b05      	cmp	r3, #5
 80061e0:	d108      	bne.n	80061f4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	789b      	ldrb	r3, [r3, #2]
 80061ea:	78fa      	ldrb	r2, [r7, #3]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d008      	beq.n	8006202 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80061f0:	2300      	movs	r3, #0
 80061f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	885b      	ldrh	r3, [r3, #2]
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	897b      	ldrh	r3, [r7, #10]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d8e5      	bhi.n	80061cc <USBD_GetEpDesc+0x32>
 8006200:	e000      	b.n	8006204 <USBD_GetEpDesc+0x6a>
          break;
 8006202:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006204:	693b      	ldr	r3, [r7, #16]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800620e:	b480      	push	{r7}
 8006210:	b085      	sub	sp, #20
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	881a      	ldrh	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	b29b      	uxth	r3, r3
 8006226:	4413      	add	r3, r2
 8006228:	b29a      	uxth	r2, r3
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4413      	add	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800623a:	68fb      	ldr	r3, [r7, #12]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	3301      	adds	r3, #1
 800625e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006266:	8a3b      	ldrh	r3, [r7, #16]
 8006268:	021b      	lsls	r3, r3, #8
 800626a:	b21a      	sxth	r2, r3
 800626c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006270:	4313      	orrs	r3, r2
 8006272:	b21b      	sxth	r3, r3
 8006274:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006276:	89fb      	ldrh	r3, [r7, #14]
}
 8006278:	4618      	mov	r0, r3
 800627a:	371c      	adds	r7, #28
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	d005      	beq.n	80062aa <USBD_StdDevReq+0x26>
 800629e:	2b40      	cmp	r3, #64	; 0x40
 80062a0:	d857      	bhi.n	8006352 <USBD_StdDevReq+0xce>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00f      	beq.n	80062c6 <USBD_StdDevReq+0x42>
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	d153      	bne.n	8006352 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	32ae      	adds	r2, #174	; 0xae
 80062b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4798      	blx	r3
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
      break;
 80062c4:	e04a      	b.n	800635c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	785b      	ldrb	r3, [r3, #1]
 80062ca:	2b09      	cmp	r3, #9
 80062cc:	d83b      	bhi.n	8006346 <USBD_StdDevReq+0xc2>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <USBD_StdDevReq+0x50>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	08006329 	.word	0x08006329
 80062d8:	0800633d 	.word	0x0800633d
 80062dc:	08006347 	.word	0x08006347
 80062e0:	08006333 	.word	0x08006333
 80062e4:	08006347 	.word	0x08006347
 80062e8:	08006307 	.word	0x08006307
 80062ec:	080062fd 	.word	0x080062fd
 80062f0:	08006347 	.word	0x08006347
 80062f4:	0800631f 	.word	0x0800631f
 80062f8:	08006311 	.word	0x08006311
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fa3c 	bl	800677c <USBD_GetDescriptor>
          break;
 8006304:	e024      	b.n	8006350 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fbcb 	bl	8006aa4 <USBD_SetAddress>
          break;
 800630e:	e01f      	b.n	8006350 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fc0a 	bl	8006b2c <USBD_SetConfig>
 8006318:	4603      	mov	r3, r0
 800631a:	73fb      	strb	r3, [r7, #15]
          break;
 800631c:	e018      	b.n	8006350 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fcad 	bl	8006c80 <USBD_GetConfig>
          break;
 8006326:	e013      	b.n	8006350 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fcde 	bl	8006cec <USBD_GetStatus>
          break;
 8006330:	e00e      	b.n	8006350 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fd0d 	bl	8006d54 <USBD_SetFeature>
          break;
 800633a:	e009      	b.n	8006350 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fd31 	bl	8006da6 <USBD_ClrFeature>
          break;
 8006344:	e004      	b.n	8006350 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fd88 	bl	8006e5e <USBD_CtlError>
          break;
 800634e:	bf00      	nop
      }
      break;
 8006350:	e004      	b.n	800635c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fd82 	bl	8006e5e <USBD_CtlError>
      break;
 800635a:	bf00      	nop
  }

  return ret;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop

08006368 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800637e:	2b40      	cmp	r3, #64	; 0x40
 8006380:	d005      	beq.n	800638e <USBD_StdItfReq+0x26>
 8006382:	2b40      	cmp	r3, #64	; 0x40
 8006384:	d852      	bhi.n	800642c <USBD_StdItfReq+0xc4>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <USBD_StdItfReq+0x26>
 800638a:	2b20      	cmp	r3, #32
 800638c:	d14e      	bne.n	800642c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006394:	b2db      	uxtb	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	2b02      	cmp	r3, #2
 800639a:	d840      	bhi.n	800641e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	889b      	ldrh	r3, [r3, #4]
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d836      	bhi.n	8006414 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	889b      	ldrh	r3, [r3, #4]
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff fed9 	bl	8006166 <USBD_CoreFindIF>
 80063b4:	4603      	mov	r3, r0
 80063b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	2bff      	cmp	r3, #255	; 0xff
 80063bc:	d01d      	beq.n	80063fa <USBD_StdItfReq+0x92>
 80063be:	7bbb      	ldrb	r3, [r7, #14]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d11a      	bne.n	80063fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80063c4:	7bba      	ldrb	r2, [r7, #14]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	32ae      	adds	r2, #174	; 0xae
 80063ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00f      	beq.n	80063f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80063d4:	7bba      	ldrb	r2, [r7, #14]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063dc:	7bba      	ldrb	r2, [r7, #14]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	32ae      	adds	r2, #174	; 0xae
 80063e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	4798      	blx	r3
 80063ee:	4603      	mov	r3, r0
 80063f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80063f2:	e004      	b.n	80063fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80063f4:	2303      	movs	r3, #3
 80063f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80063f8:	e001      	b.n	80063fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80063fa:	2303      	movs	r3, #3
 80063fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	88db      	ldrh	r3, [r3, #6]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d110      	bne.n	8006428 <USBD_StdItfReq+0xc0>
 8006406:	7bfb      	ldrb	r3, [r7, #15]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10d      	bne.n	8006428 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fdd4 	bl	8006fba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006412:	e009      	b.n	8006428 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fd21 	bl	8006e5e <USBD_CtlError>
          break;
 800641c:	e004      	b.n	8006428 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fd1c 	bl	8006e5e <USBD_CtlError>
          break;
 8006426:	e000      	b.n	800642a <USBD_StdItfReq+0xc2>
          break;
 8006428:	bf00      	nop
      }
      break;
 800642a:	e004      	b.n	8006436 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fd15 	bl	8006e5e <USBD_CtlError>
      break;
 8006434:	bf00      	nop
  }

  return ret;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	889b      	ldrh	r3, [r3, #4]
 8006452:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	d007      	beq.n	8006470 <USBD_StdEPReq+0x30>
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	f200 817f 	bhi.w	8006764 <USBD_StdEPReq+0x324>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d02a      	beq.n	80064c0 <USBD_StdEPReq+0x80>
 800646a:	2b20      	cmp	r3, #32
 800646c:	f040 817a 	bne.w	8006764 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff fe83 	bl	8006180 <USBD_CoreFindEP>
 800647a:	4603      	mov	r3, r0
 800647c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800647e:	7b7b      	ldrb	r3, [r7, #13]
 8006480:	2bff      	cmp	r3, #255	; 0xff
 8006482:	f000 8174 	beq.w	800676e <USBD_StdEPReq+0x32e>
 8006486:	7b7b      	ldrb	r3, [r7, #13]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f040 8170 	bne.w	800676e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800648e:	7b7a      	ldrb	r2, [r7, #13]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006496:	7b7a      	ldrb	r2, [r7, #13]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	32ae      	adds	r2, #174	; 0xae
 800649c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 8163 	beq.w	800676e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80064a8:	7b7a      	ldrb	r2, [r7, #13]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	32ae      	adds	r2, #174	; 0xae
 80064ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064be:	e156      	b.n	800676e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d008      	beq.n	80064da <USBD_StdEPReq+0x9a>
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	f300 8145 	bgt.w	8006758 <USBD_StdEPReq+0x318>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 809b 	beq.w	800660a <USBD_StdEPReq+0x1ca>
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d03c      	beq.n	8006552 <USBD_StdEPReq+0x112>
 80064d8:	e13e      	b.n	8006758 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d002      	beq.n	80064ec <USBD_StdEPReq+0xac>
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d016      	beq.n	8006518 <USBD_StdEPReq+0xd8>
 80064ea:	e02c      	b.n	8006546 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00d      	beq.n	800650e <USBD_StdEPReq+0xce>
 80064f2:	7bbb      	ldrb	r3, [r7, #14]
 80064f4:	2b80      	cmp	r3, #128	; 0x80
 80064f6:	d00a      	beq.n	800650e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 f8e1 	bl	80076c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006502:	2180      	movs	r1, #128	; 0x80
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 f8dd 	bl	80076c4 <USBD_LL_StallEP>
 800650a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800650c:	e020      	b.n	8006550 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fca4 	bl	8006e5e <USBD_CtlError>
              break;
 8006516:	e01b      	b.n	8006550 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	885b      	ldrh	r3, [r3, #2]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10e      	bne.n	800653e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006520:	7bbb      	ldrb	r3, [r7, #14]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00b      	beq.n	800653e <USBD_StdEPReq+0xfe>
 8006526:	7bbb      	ldrb	r3, [r7, #14]
 8006528:	2b80      	cmp	r3, #128	; 0x80
 800652a:	d008      	beq.n	800653e <USBD_StdEPReq+0xfe>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	88db      	ldrh	r3, [r3, #6]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d104      	bne.n	800653e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006534:	7bbb      	ldrb	r3, [r7, #14]
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 f8c3 	bl	80076c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fd3b 	bl	8006fba <USBD_CtlSendStatus>

              break;
 8006544:	e004      	b.n	8006550 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fc88 	bl	8006e5e <USBD_CtlError>
              break;
 800654e:	bf00      	nop
          }
          break;
 8006550:	e107      	b.n	8006762 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d002      	beq.n	8006564 <USBD_StdEPReq+0x124>
 800655e:	2b03      	cmp	r3, #3
 8006560:	d016      	beq.n	8006590 <USBD_StdEPReq+0x150>
 8006562:	e04b      	b.n	80065fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006564:	7bbb      	ldrb	r3, [r7, #14]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00d      	beq.n	8006586 <USBD_StdEPReq+0x146>
 800656a:	7bbb      	ldrb	r3, [r7, #14]
 800656c:	2b80      	cmp	r3, #128	; 0x80
 800656e:	d00a      	beq.n	8006586 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006570:	7bbb      	ldrb	r3, [r7, #14]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 f8a5 	bl	80076c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800657a:	2180      	movs	r1, #128	; 0x80
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 f8a1 	bl	80076c4 <USBD_LL_StallEP>
 8006582:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006584:	e040      	b.n	8006608 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fc68 	bl	8006e5e <USBD_CtlError>
              break;
 800658e:	e03b      	b.n	8006608 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	885b      	ldrh	r3, [r3, #2]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d136      	bne.n	8006606 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006598:	7bbb      	ldrb	r3, [r7, #14]
 800659a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d004      	beq.n	80065ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80065a2:	7bbb      	ldrb	r3, [r7, #14]
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 f8ab 	bl	8007702 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fd04 	bl	8006fba <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff fde2 	bl	8006180 <USBD_CoreFindEP>
 80065bc:	4603      	mov	r3, r0
 80065be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065c0:	7b7b      	ldrb	r3, [r7, #13]
 80065c2:	2bff      	cmp	r3, #255	; 0xff
 80065c4:	d01f      	beq.n	8006606 <USBD_StdEPReq+0x1c6>
 80065c6:	7b7b      	ldrb	r3, [r7, #13]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d11c      	bne.n	8006606 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80065cc:	7b7a      	ldrb	r2, [r7, #13]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80065d4:	7b7a      	ldrb	r2, [r7, #13]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	32ae      	adds	r2, #174	; 0xae
 80065da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d010      	beq.n	8006606 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80065e4:	7b7a      	ldrb	r2, [r7, #13]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	32ae      	adds	r2, #174	; 0xae
 80065ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80065fa:	e004      	b.n	8006606 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fc2d 	bl	8006e5e <USBD_CtlError>
              break;
 8006604:	e000      	b.n	8006608 <USBD_StdEPReq+0x1c8>
              break;
 8006606:	bf00      	nop
          }
          break;
 8006608:	e0ab      	b.n	8006762 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d002      	beq.n	800661c <USBD_StdEPReq+0x1dc>
 8006616:	2b03      	cmp	r3, #3
 8006618:	d032      	beq.n	8006680 <USBD_StdEPReq+0x240>
 800661a:	e097      	b.n	800674c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800661c:	7bbb      	ldrb	r3, [r7, #14]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d007      	beq.n	8006632 <USBD_StdEPReq+0x1f2>
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	2b80      	cmp	r3, #128	; 0x80
 8006626:	d004      	beq.n	8006632 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fc17 	bl	8006e5e <USBD_CtlError>
                break;
 8006630:	e091      	b.n	8006756 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006632:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006636:	2b00      	cmp	r3, #0
 8006638:	da0b      	bge.n	8006652 <USBD_StdEPReq+0x212>
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006640:	4613      	mov	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	3310      	adds	r3, #16
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	4413      	add	r3, r2
 800664e:	3304      	adds	r3, #4
 8006650:	e00b      	b.n	800666a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006658:	4613      	mov	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	4413      	add	r3, r2
 8006668:	3304      	adds	r3, #4
 800666a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2202      	movs	r2, #2
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fc61 	bl	8006f40 <USBD_CtlSendData>
              break;
 800667e:	e06a      	b.n	8006756 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006684:	2b00      	cmp	r3, #0
 8006686:	da11      	bge.n	80066ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	f003 020f 	and.w	r2, r3, #15
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	440b      	add	r3, r1
 800669a:	3324      	adds	r3, #36	; 0x24
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d117      	bne.n	80066d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fbda 	bl	8006e5e <USBD_CtlError>
                  break;
 80066aa:	e054      	b.n	8006756 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066ac:	7bbb      	ldrb	r3, [r7, #14]
 80066ae:	f003 020f 	and.w	r2, r3, #15
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fbc7 	bl	8006e5e <USBD_CtlError>
                  break;
 80066d0:	e041      	b.n	8006756 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da0b      	bge.n	80066f2 <USBD_StdEPReq+0x2b2>
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066e0:	4613      	mov	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	3310      	adds	r3, #16
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	4413      	add	r3, r2
 80066ee:	3304      	adds	r3, #4
 80066f0:	e00b      	b.n	800670a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066f2:	7bbb      	ldrb	r3, [r7, #14]
 80066f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066f8:	4613      	mov	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	4413      	add	r3, r2
 8006708:	3304      	adds	r3, #4
 800670a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <USBD_StdEPReq+0x2d8>
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	2b80      	cmp	r3, #128	; 0x80
 8006716:	d103      	bne.n	8006720 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	e00e      	b.n	800673e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 f80b 	bl	8007740 <USBD_LL_IsStallEP>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2201      	movs	r2, #1
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	e002      	b.n	800673e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2202      	movs	r2, #2
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fbfb 	bl	8006f40 <USBD_CtlSendData>
              break;
 800674a:	e004      	b.n	8006756 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fb85 	bl	8006e5e <USBD_CtlError>
              break;
 8006754:	bf00      	nop
          }
          break;
 8006756:	e004      	b.n	8006762 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fb7f 	bl	8006e5e <USBD_CtlError>
          break;
 8006760:	bf00      	nop
      }
      break;
 8006762:	e005      	b.n	8006770 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fb79 	bl	8006e5e <USBD_CtlError>
      break;
 800676c:	e000      	b.n	8006770 <USBD_StdEPReq+0x330>
      break;
 800676e:	bf00      	nop
  }

  return ret;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800678a:	2300      	movs	r3, #0
 800678c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	885b      	ldrh	r3, [r3, #2]
 8006796:	0a1b      	lsrs	r3, r3, #8
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	2b0e      	cmp	r3, #14
 800679e:	f200 8152 	bhi.w	8006a46 <USBD_GetDescriptor+0x2ca>
 80067a2:	a201      	add	r2, pc, #4	; (adr r2, 80067a8 <USBD_GetDescriptor+0x2c>)
 80067a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a8:	08006819 	.word	0x08006819
 80067ac:	08006831 	.word	0x08006831
 80067b0:	08006871 	.word	0x08006871
 80067b4:	08006a47 	.word	0x08006a47
 80067b8:	08006a47 	.word	0x08006a47
 80067bc:	080069e7 	.word	0x080069e7
 80067c0:	08006a13 	.word	0x08006a13
 80067c4:	08006a47 	.word	0x08006a47
 80067c8:	08006a47 	.word	0x08006a47
 80067cc:	08006a47 	.word	0x08006a47
 80067d0:	08006a47 	.word	0x08006a47
 80067d4:	08006a47 	.word	0x08006a47
 80067d8:	08006a47 	.word	0x08006a47
 80067dc:	08006a47 	.word	0x08006a47
 80067e0:	080067e5 	.word	0x080067e5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	7c12      	ldrb	r2, [r2, #16]
 80067fc:	f107 0108 	add.w	r1, r7, #8
 8006800:	4610      	mov	r0, r2
 8006802:	4798      	blx	r3
 8006804:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006806:	e126      	b.n	8006a56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fb27 	bl	8006e5e <USBD_CtlError>
        err++;
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	3301      	adds	r3, #1
 8006814:	72fb      	strb	r3, [r7, #11]
      break;
 8006816:	e11e      	b.n	8006a56 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	7c12      	ldrb	r2, [r2, #16]
 8006824:	f107 0108 	add.w	r1, r7, #8
 8006828:	4610      	mov	r0, r2
 800682a:	4798      	blx	r3
 800682c:	60f8      	str	r0, [r7, #12]
      break;
 800682e:	e112      	b.n	8006a56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	7c1b      	ldrb	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10d      	bne.n	8006854 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006840:	f107 0208 	add.w	r2, r7, #8
 8006844:	4610      	mov	r0, r2
 8006846:	4798      	blx	r3
 8006848:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	2202      	movs	r2, #2
 8006850:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006852:	e100      	b.n	8006a56 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	f107 0208 	add.w	r2, r7, #8
 8006860:	4610      	mov	r0, r2
 8006862:	4798      	blx	r3
 8006864:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3301      	adds	r3, #1
 800686a:	2202      	movs	r2, #2
 800686c:	701a      	strb	r2, [r3, #0]
      break;
 800686e:	e0f2      	b.n	8006a56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	885b      	ldrh	r3, [r3, #2]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b05      	cmp	r3, #5
 8006878:	f200 80ac 	bhi.w	80069d4 <USBD_GetDescriptor+0x258>
 800687c:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <USBD_GetDescriptor+0x108>)
 800687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006882:	bf00      	nop
 8006884:	0800689d 	.word	0x0800689d
 8006888:	080068d1 	.word	0x080068d1
 800688c:	08006905 	.word	0x08006905
 8006890:	08006939 	.word	0x08006939
 8006894:	0800696d 	.word	0x0800696d
 8006898:	080069a1 	.word	0x080069a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	7c12      	ldrb	r2, [r2, #16]
 80068b4:	f107 0108 	add.w	r1, r7, #8
 80068b8:	4610      	mov	r0, r2
 80068ba:	4798      	blx	r3
 80068bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068be:	e091      	b.n	80069e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 facb 	bl	8006e5e <USBD_CtlError>
            err++;
 80068c8:	7afb      	ldrb	r3, [r7, #11]
 80068ca:	3301      	adds	r3, #1
 80068cc:	72fb      	strb	r3, [r7, #11]
          break;
 80068ce:	e089      	b.n	80069e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	7c12      	ldrb	r2, [r2, #16]
 80068e8:	f107 0108 	add.w	r1, r7, #8
 80068ec:	4610      	mov	r0, r2
 80068ee:	4798      	blx	r3
 80068f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068f2:	e077      	b.n	80069e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fab1 	bl	8006e5e <USBD_CtlError>
            err++;
 80068fc:	7afb      	ldrb	r3, [r7, #11]
 80068fe:	3301      	adds	r3, #1
 8006900:	72fb      	strb	r3, [r7, #11]
          break;
 8006902:	e06f      	b.n	80069e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00b      	beq.n	8006928 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	7c12      	ldrb	r2, [r2, #16]
 800691c:	f107 0108 	add.w	r1, r7, #8
 8006920:	4610      	mov	r0, r2
 8006922:	4798      	blx	r3
 8006924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006926:	e05d      	b.n	80069e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fa97 	bl	8006e5e <USBD_CtlError>
            err++;
 8006930:	7afb      	ldrb	r3, [r7, #11]
 8006932:	3301      	adds	r3, #1
 8006934:	72fb      	strb	r3, [r7, #11]
          break;
 8006936:	e055      	b.n	80069e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	7c12      	ldrb	r2, [r2, #16]
 8006950:	f107 0108 	add.w	r1, r7, #8
 8006954:	4610      	mov	r0, r2
 8006956:	4798      	blx	r3
 8006958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800695a:	e043      	b.n	80069e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa7d 	bl	8006e5e <USBD_CtlError>
            err++;
 8006964:	7afb      	ldrb	r3, [r7, #11]
 8006966:	3301      	adds	r3, #1
 8006968:	72fb      	strb	r3, [r7, #11]
          break;
 800696a:	e03b      	b.n	80069e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	7c12      	ldrb	r2, [r2, #16]
 8006984:	f107 0108 	add.w	r1, r7, #8
 8006988:	4610      	mov	r0, r2
 800698a:	4798      	blx	r3
 800698c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800698e:	e029      	b.n	80069e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fa63 	bl	8006e5e <USBD_CtlError>
            err++;
 8006998:	7afb      	ldrb	r3, [r7, #11]
 800699a:	3301      	adds	r3, #1
 800699c:	72fb      	strb	r3, [r7, #11]
          break;
 800699e:	e021      	b.n	80069e4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	7c12      	ldrb	r2, [r2, #16]
 80069b8:	f107 0108 	add.w	r1, r7, #8
 80069bc:	4610      	mov	r0, r2
 80069be:	4798      	blx	r3
 80069c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069c2:	e00f      	b.n	80069e4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa49 	bl	8006e5e <USBD_CtlError>
            err++;
 80069cc:	7afb      	ldrb	r3, [r7, #11]
 80069ce:	3301      	adds	r3, #1
 80069d0:	72fb      	strb	r3, [r7, #11]
          break;
 80069d2:	e007      	b.n	80069e4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa41 	bl	8006e5e <USBD_CtlError>
          err++;
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	3301      	adds	r3, #1
 80069e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80069e2:	bf00      	nop
      }
      break;
 80069e4:	e037      	b.n	8006a56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7c1b      	ldrb	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f6:	f107 0208 	add.w	r2, r7, #8
 80069fa:	4610      	mov	r0, r2
 80069fc:	4798      	blx	r3
 80069fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a00:	e029      	b.n	8006a56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fa2a 	bl	8006e5e <USBD_CtlError>
        err++;
 8006a0a:	7afb      	ldrb	r3, [r7, #11]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a10:	e021      	b.n	8006a56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	7c1b      	ldrb	r3, [r3, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10d      	bne.n	8006a36 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	f107 0208 	add.w	r2, r7, #8
 8006a26:	4610      	mov	r0, r2
 8006a28:	4798      	blx	r3
 8006a2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	2207      	movs	r2, #7
 8006a32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a34:	e00f      	b.n	8006a56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fa10 	bl	8006e5e <USBD_CtlError>
        err++;
 8006a3e:	7afb      	ldrb	r3, [r7, #11]
 8006a40:	3301      	adds	r3, #1
 8006a42:	72fb      	strb	r3, [r7, #11]
      break;
 8006a44:	e007      	b.n	8006a56 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fa08 	bl	8006e5e <USBD_CtlError>
      err++;
 8006a4e:	7afb      	ldrb	r3, [r7, #11]
 8006a50:	3301      	adds	r3, #1
 8006a52:	72fb      	strb	r3, [r7, #11]
      break;
 8006a54:	bf00      	nop
  }

  if (err != 0U)
 8006a56:	7afb      	ldrb	r3, [r7, #11]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d11e      	bne.n	8006a9a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	88db      	ldrh	r3, [r3, #6]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d016      	beq.n	8006a92 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006a64:	893b      	ldrh	r3, [r7, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00e      	beq.n	8006a88 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	88da      	ldrh	r2, [r3, #6]
 8006a6e:	893b      	ldrh	r3, [r7, #8]
 8006a70:	4293      	cmp	r3, r2
 8006a72:	bf28      	it	cs
 8006a74:	4613      	movcs	r3, r2
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a7a:	893b      	ldrh	r3, [r7, #8]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	68f9      	ldr	r1, [r7, #12]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fa5d 	bl	8006f40 <USBD_CtlSendData>
 8006a86:	e009      	b.n	8006a9c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f9e7 	bl	8006e5e <USBD_CtlError>
 8006a90:	e004      	b.n	8006a9c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa91 	bl	8006fba <USBD_CtlSendStatus>
 8006a98:	e000      	b.n	8006a9c <USBD_GetDescriptor+0x320>
    return;
 8006a9a:	bf00      	nop
  }
}
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop

08006aa4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	889b      	ldrh	r3, [r3, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d131      	bne.n	8006b1a <USBD_SetAddress+0x76>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	88db      	ldrh	r3, [r3, #6]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d12d      	bne.n	8006b1a <USBD_SetAddress+0x76>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	885b      	ldrh	r3, [r3, #2]
 8006ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac4:	d829      	bhi.n	8006b1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	885b      	ldrh	r3, [r3, #2]
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d104      	bne.n	8006ae8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f9bc 	bl	8006e5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae6:	e01d      	b.n	8006b24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	7bfa      	ldrb	r2, [r7, #15]
 8006aec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fe4f 	bl	8007798 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa5d 	bl	8006fba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b0e:	e009      	b.n	8006b24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b18:	e004      	b.n	8006b24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f99e 	bl	8006e5e <USBD_CtlError>
  }
}
 8006b22:	bf00      	nop
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	885b      	ldrh	r3, [r3, #2]
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	4b4e      	ldr	r3, [pc, #312]	; (8006c7c <USBD_SetConfig+0x150>)
 8006b42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b44:	4b4d      	ldr	r3, [pc, #308]	; (8006c7c <USBD_SetConfig+0x150>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d905      	bls.n	8006b58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f985 	bl	8006e5e <USBD_CtlError>
    return USBD_FAIL;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e08c      	b.n	8006c72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d002      	beq.n	8006b6a <USBD_SetConfig+0x3e>
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d029      	beq.n	8006bbc <USBD_SetConfig+0x90>
 8006b68:	e075      	b.n	8006c56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b6a:	4b44      	ldr	r3, [pc, #272]	; (8006c7c <USBD_SetConfig+0x150>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d020      	beq.n	8006bb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006b72:	4b42      	ldr	r3, [pc, #264]	; (8006c7c <USBD_SetConfig+0x150>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b7c:	4b3f      	ldr	r3, [pc, #252]	; (8006c7c <USBD_SetConfig+0x150>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7fe ffbd 	bl	8005b02 <USBD_SetClassConfig>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d008      	beq.n	8006ba4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f962 	bl	8006e5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ba2:	e065      	b.n	8006c70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fa08 	bl	8006fba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2203      	movs	r2, #3
 8006bae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006bb2:	e05d      	b.n	8006c70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fa00 	bl	8006fba <USBD_CtlSendStatus>
      break;
 8006bba:	e059      	b.n	8006c70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006bbc:	4b2f      	ldr	r3, [pc, #188]	; (8006c7c <USBD_SetConfig+0x150>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d112      	bne.n	8006bea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006bcc:	4b2b      	ldr	r3, [pc, #172]	; (8006c7c <USBD_SetConfig+0x150>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bd6:	4b29      	ldr	r3, [pc, #164]	; (8006c7c <USBD_SetConfig+0x150>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7fe ffac 	bl	8005b3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f9e9 	bl	8006fba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006be8:	e042      	b.n	8006c70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006bea:	4b24      	ldr	r3, [pc, #144]	; (8006c7c <USBD_SetConfig+0x150>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d02a      	beq.n	8006c4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fe ff9a 	bl	8005b3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c06:	4b1d      	ldr	r3, [pc, #116]	; (8006c7c <USBD_SetConfig+0x150>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c10:	4b1a      	ldr	r3, [pc, #104]	; (8006c7c <USBD_SetConfig+0x150>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fe ff73 	bl	8005b02 <USBD_SetClassConfig>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00f      	beq.n	8006c46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f918 	bl	8006e5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fe ff7f 	bl	8005b3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c44:	e014      	b.n	8006c70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f9b7 	bl	8006fba <USBD_CtlSendStatus>
      break;
 8006c4c:	e010      	b.n	8006c70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f9b3 	bl	8006fba <USBD_CtlSendStatus>
      break;
 8006c54:	e00c      	b.n	8006c70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f900 	bl	8006e5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c5e:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <USBD_SetConfig+0x150>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fe ff68 	bl	8005b3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c6e:	bf00      	nop
  }

  return ret;
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000190 	.word	0x20000190

08006c80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	88db      	ldrh	r3, [r3, #6]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d004      	beq.n	8006c9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f8e2 	bl	8006e5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c9a:	e023      	b.n	8006ce4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	dc02      	bgt.n	8006cae <USBD_GetConfig+0x2e>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	dc03      	bgt.n	8006cb4 <USBD_GetConfig+0x34>
 8006cac:	e015      	b.n	8006cda <USBD_GetConfig+0x5a>
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d00b      	beq.n	8006cca <USBD_GetConfig+0x4a>
 8006cb2:	e012      	b.n	8006cda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f93c 	bl	8006f40 <USBD_CtlSendData>
        break;
 8006cc8:	e00c      	b.n	8006ce4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3304      	adds	r3, #4
 8006cce:	2201      	movs	r2, #1
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f934 	bl	8006f40 <USBD_CtlSendData>
        break;
 8006cd8:	e004      	b.n	8006ce4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f8be 	bl	8006e5e <USBD_CtlError>
        break;
 8006ce2:	bf00      	nop
}
 8006ce4:	bf00      	nop
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d81e      	bhi.n	8006d42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	88db      	ldrh	r3, [r3, #6]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d004      	beq.n	8006d16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f8a5 	bl	8006e5e <USBD_CtlError>
        break;
 8006d14:	e01a      	b.n	8006d4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f043 0202 	orr.w	r2, r3, #2
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	330c      	adds	r3, #12
 8006d36:	2202      	movs	r2, #2
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f900 	bl	8006f40 <USBD_CtlSendData>
      break;
 8006d40:	e004      	b.n	8006d4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f88a 	bl	8006e5e <USBD_CtlError>
      break;
 8006d4a:	bf00      	nop
  }
}
 8006d4c:	bf00      	nop
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	885b      	ldrh	r3, [r3, #2]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d107      	bne.n	8006d76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f923 	bl	8006fba <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006d74:	e013      	b.n	8006d9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	885b      	ldrh	r3, [r3, #2]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d10b      	bne.n	8006d96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	889b      	ldrh	r3, [r3, #4]
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f913 	bl	8006fba <USBD_CtlSendStatus>
}
 8006d94:	e003      	b.n	8006d9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f860 	bl	8006e5e <USBD_CtlError>
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d80b      	bhi.n	8006dd6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	885b      	ldrh	r3, [r3, #2]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d10c      	bne.n	8006de0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f8f3 	bl	8006fba <USBD_CtlSendStatus>
      }
      break;
 8006dd4:	e004      	b.n	8006de0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f840 	bl	8006e5e <USBD_CtlError>
      break;
 8006dde:	e000      	b.n	8006de2 <USBD_ClrFeature+0x3c>
      break;
 8006de0:	bf00      	nop
  }
}
 8006de2:	bf00      	nop
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	781a      	ldrb	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	781a      	ldrb	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f7ff fa17 	bl	8006248 <SWAPBYTE>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3301      	adds	r3, #1
 8006e26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff fa0a 	bl	8006248 <SWAPBYTE>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3301      	adds	r3, #1
 8006e46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7ff f9fd 	bl	8006248 <SWAPBYTE>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	461a      	mov	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	80da      	strh	r2, [r3, #6]
}
 8006e56:	bf00      	nop
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e68:	2180      	movs	r1, #128	; 0x80
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fc2a 	bl	80076c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e70:	2100      	movs	r1, #0
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fc26 	bl	80076c4 <USBD_LL_StallEP>
}
 8006e78:	bf00      	nop
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d036      	beq.n	8006f04 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e9a:	6938      	ldr	r0, [r7, #16]
 8006e9c:	f000 f836 	bl	8006f0c <USBD_GetLen>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	7812      	ldrb	r2, [r2, #0]
 8006eb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ed0:	e013      	b.n	8006efa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	7812      	ldrb	r2, [r2, #0]
 8006edc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	613b      	str	r3, [r7, #16]
    idx++;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	4413      	add	r3, r2
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e7      	bne.n	8006ed2 <USBD_GetString+0x52>
 8006f02:	e000      	b.n	8006f06 <USBD_GetString+0x86>
    return;
 8006f04:	bf00      	nop
  }
}
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f1c:	e005      	b.n	8006f2a <USBD_GetLen+0x1e>
  {
    len++;
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	3301      	adds	r3, #1
 8006f22:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	3301      	adds	r3, #1
 8006f28:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f5      	bne.n	8006f1e <USBD_GetLen+0x12>
  }

  return len;
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	2100      	movs	r1, #0
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 fc35 	bl	80077d6 <USBD_LL_Transmit>

  return USBD_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	2100      	movs	r1, #0
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fc24 	bl	80077d6 <USBD_LL_Transmit>

  return USBD_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	2100      	movs	r1, #0
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 fc34 	bl	8007818 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006fca:	2300      	movs	r3, #0
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2100      	movs	r1, #0
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fc00 	bl	80077d6 <USBD_LL_Transmit>

  return USBD_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2205      	movs	r2, #5
 8006fec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fc0e 	bl	8007818 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800700c:	2200      	movs	r2, #0
 800700e:	490e      	ldr	r1, [pc, #56]	; (8007048 <MX_USB_DEVICE_Init+0x40>)
 8007010:	480e      	ldr	r0, [pc, #56]	; (800704c <MX_USB_DEVICE_Init+0x44>)
 8007012:	f7fe fcf9 	bl	8005a08 <USBD_Init>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800701c:	f7f9 fbc2 	bl	80007a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007020:	490b      	ldr	r1, [pc, #44]	; (8007050 <MX_USB_DEVICE_Init+0x48>)
 8007022:	480a      	ldr	r0, [pc, #40]	; (800704c <MX_USB_DEVICE_Init+0x44>)
 8007024:	f7fe fd20 	bl	8005a68 <USBD_RegisterClass>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800702e:	f7f9 fbb9 	bl	80007a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007032:	4806      	ldr	r0, [pc, #24]	; (800704c <MX_USB_DEVICE_Init+0x44>)
 8007034:	f7fe fd4e 	bl	8005ad4 <USBD_Start>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800703e:	f7f9 fbb1 	bl	80007a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007042:	bf00      	nop
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	200000cc 	.word	0x200000cc
 800704c:	20000194 	.word	0x20000194
 8007050:	2000000c 	.word	0x2000000c

08007054 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	6039      	str	r1, [r7, #0]
 800705e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2212      	movs	r2, #18
 8007064:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007066:	4b03      	ldr	r3, [pc, #12]	; (8007074 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	200000ec 	.word	0x200000ec

08007078 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	6039      	str	r1, [r7, #0]
 8007082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2204      	movs	r2, #4
 8007088:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800708a:	4b03      	ldr	r3, [pc, #12]	; (8007098 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	2000010c 	.word	0x2000010c

0800709c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	6039      	str	r1, [r7, #0]
 80070a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d105      	bne.n	80070ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	4907      	ldr	r1, [pc, #28]	; (80070d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80070b2:	4808      	ldr	r0, [pc, #32]	; (80070d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80070b4:	f7ff fee4 	bl	8006e80 <USBD_GetString>
 80070b8:	e004      	b.n	80070c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	4904      	ldr	r1, [pc, #16]	; (80070d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80070be:	4805      	ldr	r0, [pc, #20]	; (80070d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80070c0:	f7ff fede 	bl	8006e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070c4:	4b02      	ldr	r3, [pc, #8]	; (80070d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20000470 	.word	0x20000470
 80070d4:	080079f0 	.word	0x080079f0

080070d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	4603      	mov	r3, r0
 80070e0:	6039      	str	r1, [r7, #0]
 80070e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	4904      	ldr	r1, [pc, #16]	; (80070f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80070e8:	4804      	ldr	r0, [pc, #16]	; (80070fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80070ea:	f7ff fec9 	bl	8006e80 <USBD_GetString>
  return USBD_StrDesc;
 80070ee:	4b02      	ldr	r3, [pc, #8]	; (80070f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	20000470 	.word	0x20000470
 80070fc:	08007a08 	.word	0x08007a08

08007100 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	6039      	str	r1, [r7, #0]
 800710a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	221a      	movs	r2, #26
 8007110:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007112:	f000 f855 	bl	80071c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007116:	4b02      	ldr	r3, [pc, #8]	; (8007120 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20000110 	.word	0x20000110

08007124 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	6039      	str	r1, [r7, #0]
 800712e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007130:	79fb      	ldrb	r3, [r7, #7]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d105      	bne.n	8007142 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	4907      	ldr	r1, [pc, #28]	; (8007158 <USBD_FS_ConfigStrDescriptor+0x34>)
 800713a:	4808      	ldr	r0, [pc, #32]	; (800715c <USBD_FS_ConfigStrDescriptor+0x38>)
 800713c:	f7ff fea0 	bl	8006e80 <USBD_GetString>
 8007140:	e004      	b.n	800714c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	4904      	ldr	r1, [pc, #16]	; (8007158 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007146:	4805      	ldr	r0, [pc, #20]	; (800715c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007148:	f7ff fe9a 	bl	8006e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 800714c:	4b02      	ldr	r3, [pc, #8]	; (8007158 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	20000470 	.word	0x20000470
 800715c:	08007a1c 	.word	0x08007a1c

08007160 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	6039      	str	r1, [r7, #0]
 800716a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d105      	bne.n	800717e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	4907      	ldr	r1, [pc, #28]	; (8007194 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007176:	4808      	ldr	r0, [pc, #32]	; (8007198 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007178:	f7ff fe82 	bl	8006e80 <USBD_GetString>
 800717c:	e004      	b.n	8007188 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	4904      	ldr	r1, [pc, #16]	; (8007194 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007182:	4805      	ldr	r0, [pc, #20]	; (8007198 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007184:	f7ff fe7c 	bl	8006e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007188:	4b02      	ldr	r3, [pc, #8]	; (8007194 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20000470 	.word	0x20000470
 8007198:	08007a28 	.word	0x08007a28

0800719c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	6039      	str	r1, [r7, #0]
 80071a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	220c      	movs	r2, #12
 80071ac:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80071ae:	4b03      	ldr	r3, [pc, #12]	; (80071bc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	20000100 	.word	0x20000100

080071c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071c6:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <Get_SerialNum+0x44>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071cc:	4b0e      	ldr	r3, [pc, #56]	; (8007208 <Get_SerialNum+0x48>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071d2:	4b0e      	ldr	r3, [pc, #56]	; (800720c <Get_SerialNum+0x4c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4413      	add	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071e6:	2208      	movs	r2, #8
 80071e8:	4909      	ldr	r1, [pc, #36]	; (8007210 <Get_SerialNum+0x50>)
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f814 	bl	8007218 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071f0:	2204      	movs	r2, #4
 80071f2:	4908      	ldr	r1, [pc, #32]	; (8007214 <Get_SerialNum+0x54>)
 80071f4:	68b8      	ldr	r0, [r7, #8]
 80071f6:	f000 f80f 	bl	8007218 <IntToUnicode>
  }
}
 80071fa:	bf00      	nop
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	1fff7a10 	.word	0x1fff7a10
 8007208:	1fff7a14 	.word	0x1fff7a14
 800720c:	1fff7a18 	.word	0x1fff7a18
 8007210:	20000112 	.word	0x20000112
 8007214:	20000122 	.word	0x20000122

08007218 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4613      	mov	r3, r2
 8007224:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007226:	2300      	movs	r3, #0
 8007228:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800722a:	2300      	movs	r3, #0
 800722c:	75fb      	strb	r3, [r7, #23]
 800722e:	e027      	b.n	8007280 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	0f1b      	lsrs	r3, r3, #28
 8007234:	2b09      	cmp	r3, #9
 8007236:	d80b      	bhi.n	8007250 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	0f1b      	lsrs	r3, r3, #28
 800723c:	b2da      	uxtb	r2, r3
 800723e:	7dfb      	ldrb	r3, [r7, #23]
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	4619      	mov	r1, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	440b      	add	r3, r1
 8007248:	3230      	adds	r2, #48	; 0x30
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	e00a      	b.n	8007266 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	0f1b      	lsrs	r3, r3, #28
 8007254:	b2da      	uxtb	r2, r3
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	005b      	lsls	r3, r3, #1
 800725a:	4619      	mov	r1, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	440b      	add	r3, r1
 8007260:	3237      	adds	r2, #55	; 0x37
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	011b      	lsls	r3, r3, #4
 800726a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	3301      	adds	r3, #1
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	4413      	add	r3, r2
 8007276:	2200      	movs	r2, #0
 8007278:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800727a:	7dfb      	ldrb	r3, [r7, #23]
 800727c:	3301      	adds	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
 8007280:	7dfa      	ldrb	r2, [r7, #23]
 8007282:	79fb      	ldrb	r3, [r7, #7]
 8007284:	429a      	cmp	r2, r3
 8007286:	d3d3      	bcc.n	8007230 <IntToUnicode+0x18>
  }
}
 8007288:	bf00      	nop
 800728a:	bf00      	nop
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
	...

08007298 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b0a0      	sub	sp, #128	; 0x80
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	605a      	str	r2, [r3, #4]
 80072aa:	609a      	str	r2, [r3, #8]
 80072ac:	60da      	str	r2, [r3, #12]
 80072ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80072b0:	f107 0310 	add.w	r3, r7, #16
 80072b4:	225c      	movs	r2, #92	; 0x5c
 80072b6:	2100      	movs	r1, #0
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fb61 	bl	8007980 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072c6:	d156      	bne.n	8007376 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80072c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80072ce:	2300      	movs	r3, #0
 80072d0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80072d2:	f107 0310 	add.w	r3, r7, #16
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fb fa6a 	bl	80027b0 <HAL_RCCEx_PeriphCLKConfig>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80072e2:	f7f9 fa5f 	bl	80007a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072e6:	2300      	movs	r3, #0
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	4b25      	ldr	r3, [pc, #148]	; (8007380 <HAL_PCD_MspInit+0xe8>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	4a24      	ldr	r2, [pc, #144]	; (8007380 <HAL_PCD_MspInit+0xe8>)
 80072f0:	f043 0301 	orr.w	r3, r3, #1
 80072f4:	6313      	str	r3, [r2, #48]	; 0x30
 80072f6:	4b22      	ldr	r3, [pc, #136]	; (8007380 <HAL_PCD_MspInit+0xe8>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007302:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007306:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007308:	2302      	movs	r3, #2
 800730a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800730c:	2300      	movs	r3, #0
 800730e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007310:	2303      	movs	r3, #3
 8007312:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007314:	230a      	movs	r3, #10
 8007316:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007318:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800731c:	4619      	mov	r1, r3
 800731e:	4819      	ldr	r0, [pc, #100]	; (8007384 <HAL_PCD_MspInit+0xec>)
 8007320:	f7f9 fcce 	bl	8000cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007328:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800732a:	2300      	movs	r3, #0
 800732c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800732e:	2300      	movs	r3, #0
 8007330:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007332:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007336:	4619      	mov	r1, r3
 8007338:	4812      	ldr	r0, [pc, #72]	; (8007384 <HAL_PCD_MspInit+0xec>)
 800733a:	f7f9 fcc1 	bl	8000cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800733e:	4b10      	ldr	r3, [pc, #64]	; (8007380 <HAL_PCD_MspInit+0xe8>)
 8007340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007342:	4a0f      	ldr	r2, [pc, #60]	; (8007380 <HAL_PCD_MspInit+0xe8>)
 8007344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007348:	6353      	str	r3, [r2, #52]	; 0x34
 800734a:	2300      	movs	r3, #0
 800734c:	60bb      	str	r3, [r7, #8]
 800734e:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <HAL_PCD_MspInit+0xe8>)
 8007350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007352:	4a0b      	ldr	r2, [pc, #44]	; (8007380 <HAL_PCD_MspInit+0xe8>)
 8007354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007358:	6453      	str	r3, [r2, #68]	; 0x44
 800735a:	4b09      	ldr	r3, [pc, #36]	; (8007380 <HAL_PCD_MspInit+0xe8>)
 800735c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007362:	60bb      	str	r3, [r7, #8]
 8007364:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007366:	2200      	movs	r2, #0
 8007368:	2100      	movs	r1, #0
 800736a:	2043      	movs	r0, #67	; 0x43
 800736c:	f7f9 fc71 	bl	8000c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007370:	2043      	movs	r0, #67	; 0x43
 8007372:	f7f9 fc8a 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007376:	bf00      	nop
 8007378:	3780      	adds	r7, #128	; 0x80
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	40023800 	.word	0x40023800
 8007384:	40020000 	.word	0x40020000

08007388 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f7fe fbe5 	bl	8005b6e <USBD_LL_SetupStage>
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80073be:	78fa      	ldrb	r2, [r7, #3]
 80073c0:	6879      	ldr	r1, [r7, #4]
 80073c2:	4613      	mov	r3, r2
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	4413      	add	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	440b      	add	r3, r1
 80073cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	78fb      	ldrb	r3, [r7, #3]
 80073d4:	4619      	mov	r1, r3
 80073d6:	f7fe fc1f 	bl	8005c18 <USBD_LL_DataOutStage>
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80073f4:	78fa      	ldrb	r2, [r7, #3]
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4613      	mov	r3, r2
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	440b      	add	r3, r1
 8007402:	334c      	adds	r3, #76	; 0x4c
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	78fb      	ldrb	r3, [r7, #3]
 8007408:	4619      	mov	r1, r3
 800740a:	f7fe fcb8 	bl	8005d7e <USBD_LL_DataInStage>
}
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b082      	sub	sp, #8
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007424:	4618      	mov	r0, r3
 8007426:	f7fe fdec 	bl	8006002 <USBD_LL_SOF>
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800743a:	2301      	movs	r3, #1
 800743c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007446:	2300      	movs	r3, #0
 8007448:	73fb      	strb	r3, [r7, #15]
 800744a:	e008      	b.n	800745e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	2b02      	cmp	r3, #2
 8007452:	d102      	bne.n	800745a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007454:	2301      	movs	r3, #1
 8007456:	73fb      	strb	r3, [r7, #15]
 8007458:	e001      	b.n	800745e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800745a:	f7f9 f9a3 	bl	80007a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007464:	7bfa      	ldrb	r2, [r7, #15]
 8007466:	4611      	mov	r1, r2
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe fd8c 	bl	8005f86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007474:	4618      	mov	r0, r3
 8007476:	f7fe fd34 	bl	8005ee2 <USBD_LL_Reset>
}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe fd87 	bl	8005fa6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074aa:	f043 0301 	orr.w	r3, r3, #1
 80074ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074b8:	4b04      	ldr	r3, [pc, #16]	; (80074cc <HAL_PCD_SuspendCallback+0x48>)
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	4a03      	ldr	r2, [pc, #12]	; (80074cc <HAL_PCD_SuspendCallback+0x48>)
 80074be:	f043 0306 	orr.w	r3, r3, #6
 80074c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074c4:	bf00      	nop
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	e000ed00 	.word	0xe000ed00

080074d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fe fd77 	bl	8005fd2 <USBD_LL_Resume>
}
 80074e4:	bf00      	nop
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	4611      	mov	r1, r2
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe fdcf 	bl	80060a6 <USBD_LL_IsoOUTIncomplete>
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007522:	78fa      	ldrb	r2, [r7, #3]
 8007524:	4611      	mov	r1, r2
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fd8b 	bl	8006042 <USBD_LL_IsoINIncomplete>
}
 800752c:	bf00      	nop
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fde1 	bl	800610a <USBD_LL_DevConnected>
}
 8007548:	bf00      	nop
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fdde 	bl	8006120 <USBD_LL_DevDisconnected>
}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d13c      	bne.n	80075f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800757c:	4a20      	ldr	r2, [pc, #128]	; (8007600 <USBD_LL_Init+0x94>)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a1e      	ldr	r2, [pc, #120]	; (8007600 <USBD_LL_Init+0x94>)
 8007588:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800758c:	4b1c      	ldr	r3, [pc, #112]	; (8007600 <USBD_LL_Init+0x94>)
 800758e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007592:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007594:	4b1a      	ldr	r3, [pc, #104]	; (8007600 <USBD_LL_Init+0x94>)
 8007596:	2206      	movs	r2, #6
 8007598:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800759a:	4b19      	ldr	r3, [pc, #100]	; (8007600 <USBD_LL_Init+0x94>)
 800759c:	2202      	movs	r2, #2
 800759e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075a0:	4b17      	ldr	r3, [pc, #92]	; (8007600 <USBD_LL_Init+0x94>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075a6:	4b16      	ldr	r3, [pc, #88]	; (8007600 <USBD_LL_Init+0x94>)
 80075a8:	2202      	movs	r2, #2
 80075aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80075ac:	4b14      	ldr	r3, [pc, #80]	; (8007600 <USBD_LL_Init+0x94>)
 80075ae:	2201      	movs	r2, #1
 80075b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80075b2:	4b13      	ldr	r3, [pc, #76]	; (8007600 <USBD_LL_Init+0x94>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075b8:	4b11      	ldr	r3, [pc, #68]	; (8007600 <USBD_LL_Init+0x94>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80075be:	4b10      	ldr	r3, [pc, #64]	; (8007600 <USBD_LL_Init+0x94>)
 80075c0:	2201      	movs	r2, #1
 80075c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80075c4:	4b0e      	ldr	r3, [pc, #56]	; (8007600 <USBD_LL_Init+0x94>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80075ca:	480d      	ldr	r0, [pc, #52]	; (8007600 <USBD_LL_Init+0x94>)
 80075cc:	f7f9 fd25 	bl	800101a <HAL_PCD_Init>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80075d6:	f7f9 f8e5 	bl	80007a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80075da:	2180      	movs	r1, #128	; 0x80
 80075dc:	4808      	ldr	r0, [pc, #32]	; (8007600 <USBD_LL_Init+0x94>)
 80075de:	f7fa ff98 	bl	8002512 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075e2:	2240      	movs	r2, #64	; 0x40
 80075e4:	2100      	movs	r1, #0
 80075e6:	4806      	ldr	r0, [pc, #24]	; (8007600 <USBD_LL_Init+0x94>)
 80075e8:	f7fa ff4c 	bl	8002484 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80075ec:	2280      	movs	r2, #128	; 0x80
 80075ee:	2101      	movs	r1, #1
 80075f0:	4803      	ldr	r0, [pc, #12]	; (8007600 <USBD_LL_Init+0x94>)
 80075f2:	f7fa ff47 	bl	8002484 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	20000670 	.word	0x20000670

08007604 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800761a:	4618      	mov	r0, r3
 800761c:	f7f9 fe21 	bl	8001262 <HAL_PCD_Start>
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	4618      	mov	r0, r3
 8007628:	f000 f97e 	bl	8007928 <USBD_Get_USB_Status>
 800762c:	4603      	mov	r3, r0
 800762e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007630:	7bbb      	ldrb	r3, [r7, #14]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b084      	sub	sp, #16
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	4608      	mov	r0, r1
 8007644:	4611      	mov	r1, r2
 8007646:	461a      	mov	r2, r3
 8007648:	4603      	mov	r3, r0
 800764a:	70fb      	strb	r3, [r7, #3]
 800764c:	460b      	mov	r3, r1
 800764e:	70bb      	strb	r3, [r7, #2]
 8007650:	4613      	mov	r3, r2
 8007652:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007662:	78bb      	ldrb	r3, [r7, #2]
 8007664:	883a      	ldrh	r2, [r7, #0]
 8007666:	78f9      	ldrb	r1, [r7, #3]
 8007668:	f7fa fb1f 	bl	8001caa <HAL_PCD_EP_Open>
 800766c:	4603      	mov	r3, r0
 800766e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	4618      	mov	r0, r3
 8007674:	f000 f958 	bl	8007928 <USBD_Get_USB_Status>
 8007678:	4603      	mov	r3, r0
 800767a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800767c:	7bbb      	ldrb	r3, [r7, #14]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	460b      	mov	r3, r1
 8007690:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076a0:	78fa      	ldrb	r2, [r7, #3]
 80076a2:	4611      	mov	r1, r2
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fa fb68 	bl	8001d7a <HAL_PCD_EP_Close>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 f939 	bl	8007928 <USBD_Get_USB_Status>
 80076b6:	4603      	mov	r3, r0
 80076b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076de:	78fa      	ldrb	r2, [r7, #3]
 80076e0:	4611      	mov	r1, r2
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fa fc28 	bl	8001f38 <HAL_PCD_EP_SetStall>
 80076e8:	4603      	mov	r3, r0
 80076ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 f91a 	bl	8007928 <USBD_Get_USB_Status>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	460b      	mov	r3, r1
 800770c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800771c:	78fa      	ldrb	r2, [r7, #3]
 800771e:	4611      	mov	r1, r2
 8007720:	4618      	mov	r0, r3
 8007722:	f7fa fc6d 	bl	8002000 <HAL_PCD_EP_ClrStall>
 8007726:	4603      	mov	r3, r0
 8007728:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	4618      	mov	r0, r3
 800772e:	f000 f8fb 	bl	8007928 <USBD_Get_USB_Status>
 8007732:	4603      	mov	r3, r0
 8007734:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007736:	7bbb      	ldrb	r3, [r7, #14]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007752:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007758:	2b00      	cmp	r3, #0
 800775a:	da0b      	bge.n	8007774 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800775c:	78fb      	ldrb	r3, [r7, #3]
 800775e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007762:	68f9      	ldr	r1, [r7, #12]
 8007764:	4613      	mov	r3, r2
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	440b      	add	r3, r1
 800776e:	333e      	adds	r3, #62	; 0x3e
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	e00b      	b.n	800778c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800777a:	68f9      	ldr	r1, [r7, #12]
 800777c:	4613      	mov	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800778a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800778c:	4618      	mov	r0, r3
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	4611      	mov	r1, r2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fa fa52 	bl	8001c60 <HAL_PCD_SetAddress>
 80077bc:	4603      	mov	r3, r0
 80077be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 f8b0 	bl	8007928 <USBD_Get_USB_Status>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b086      	sub	sp, #24
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
 80077e2:	460b      	mov	r3, r1
 80077e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077f4:	7af9      	ldrb	r1, [r7, #11]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	f7fa fb53 	bl	8001ea4 <HAL_PCD_EP_Transmit>
 80077fe:	4603      	mov	r3, r0
 8007800:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	4618      	mov	r0, r3
 8007806:	f000 f88f 	bl	8007928 <USBD_Get_USB_Status>
 800780a:	4603      	mov	r3, r0
 800780c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800780e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3718      	adds	r7, #24
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	607a      	str	r2, [r7, #4]
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	460b      	mov	r3, r1
 8007826:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007836:	7af9      	ldrb	r1, [r7, #11]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	f7fa fae7 	bl	8001e0e <HAL_PCD_EP_Receive>
 8007840:	4603      	mov	r3, r0
 8007842:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	4618      	mov	r0, r3
 8007848:	f000 f86e 	bl	8007928 <USBD_Get_USB_Status>
 800784c:	4603      	mov	r3, r0
 800784e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007850:	7dbb      	ldrb	r3, [r7, #22]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <HAL_PCDEx_LPM_Callback+0x18>
 800786e:	2b01      	cmp	r3, #1
 8007870:	d01f      	beq.n	80078b2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007872:	e03b      	b.n	80078ec <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d007      	beq.n	800788c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800787c:	f7f8 fe4e 	bl	800051c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007880:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <HAL_PCDEx_LPM_Callback+0x98>)
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	4a1b      	ldr	r2, [pc, #108]	; (80078f4 <HAL_PCDEx_LPM_Callback+0x98>)
 8007886:	f023 0306 	bic.w	r3, r3, #6
 800788a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	6812      	ldr	r2, [r2, #0]
 800789a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800789e:	f023 0301 	bic.w	r3, r3, #1
 80078a2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fb91 	bl	8005fd2 <USBD_LL_Resume>
    break;
 80078b0:	e01c      	b.n	80078ec <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	6812      	ldr	r2, [r2, #0]
 80078c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078c4:	f043 0301 	orr.w	r3, r3, #1
 80078c8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fe fb68 	bl	8005fa6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078de:	4b05      	ldr	r3, [pc, #20]	; (80078f4 <HAL_PCDEx_LPM_Callback+0x98>)
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	4a04      	ldr	r2, [pc, #16]	; (80078f4 <HAL_PCDEx_LPM_Callback+0x98>)
 80078e4:	f043 0306 	orr.w	r3, r3, #6
 80078e8:	6113      	str	r3, [r2, #16]
    break;
 80078ea:	bf00      	nop
}
 80078ec:	bf00      	nop
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	e000ed00 	.word	0xe000ed00

080078f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007900:	4b03      	ldr	r3, [pc, #12]	; (8007910 <USBD_static_malloc+0x18>)
}
 8007902:	4618      	mov	r0, r3
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	20000b7c 	.word	0x20000b7c

08007914 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]

}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	4603      	mov	r3, r0
 8007930:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007936:	79fb      	ldrb	r3, [r7, #7]
 8007938:	2b03      	cmp	r3, #3
 800793a:	d817      	bhi.n	800796c <USBD_Get_USB_Status+0x44>
 800793c:	a201      	add	r2, pc, #4	; (adr r2, 8007944 <USBD_Get_USB_Status+0x1c>)
 800793e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007942:	bf00      	nop
 8007944:	08007955 	.word	0x08007955
 8007948:	0800795b 	.word	0x0800795b
 800794c:	08007961 	.word	0x08007961
 8007950:	08007967 	.word	0x08007967
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]
    break;
 8007958:	e00b      	b.n	8007972 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800795a:	2303      	movs	r3, #3
 800795c:	73fb      	strb	r3, [r7, #15]
    break;
 800795e:	e008      	b.n	8007972 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007960:	2301      	movs	r3, #1
 8007962:	73fb      	strb	r3, [r7, #15]
    break;
 8007964:	e005      	b.n	8007972 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007966:	2303      	movs	r3, #3
 8007968:	73fb      	strb	r3, [r7, #15]
    break;
 800796a:	e002      	b.n	8007972 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800796c:	2303      	movs	r3, #3
 800796e:	73fb      	strb	r3, [r7, #15]
    break;
 8007970:	bf00      	nop
  }
  return usb_status;
 8007972:	7bfb      	ldrb	r3, [r7, #15]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <memset>:
 8007980:	4402      	add	r2, r0
 8007982:	4603      	mov	r3, r0
 8007984:	4293      	cmp	r3, r2
 8007986:	d100      	bne.n	800798a <memset+0xa>
 8007988:	4770      	bx	lr
 800798a:	f803 1b01 	strb.w	r1, [r3], #1
 800798e:	e7f9      	b.n	8007984 <memset+0x4>

08007990 <__libc_init_array>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	4d0d      	ldr	r5, [pc, #52]	; (80079c8 <__libc_init_array+0x38>)
 8007994:	4c0d      	ldr	r4, [pc, #52]	; (80079cc <__libc_init_array+0x3c>)
 8007996:	1b64      	subs	r4, r4, r5
 8007998:	10a4      	asrs	r4, r4, #2
 800799a:	2600      	movs	r6, #0
 800799c:	42a6      	cmp	r6, r4
 800799e:	d109      	bne.n	80079b4 <__libc_init_array+0x24>
 80079a0:	4d0b      	ldr	r5, [pc, #44]	; (80079d0 <__libc_init_array+0x40>)
 80079a2:	4c0c      	ldr	r4, [pc, #48]	; (80079d4 <__libc_init_array+0x44>)
 80079a4:	f000 f818 	bl	80079d8 <_init>
 80079a8:	1b64      	subs	r4, r4, r5
 80079aa:	10a4      	asrs	r4, r4, #2
 80079ac:	2600      	movs	r6, #0
 80079ae:	42a6      	cmp	r6, r4
 80079b0:	d105      	bne.n	80079be <__libc_init_array+0x2e>
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b8:	4798      	blx	r3
 80079ba:	3601      	adds	r6, #1
 80079bc:	e7ee      	b.n	800799c <__libc_init_array+0xc>
 80079be:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c2:	4798      	blx	r3
 80079c4:	3601      	adds	r6, #1
 80079c6:	e7f2      	b.n	80079ae <__libc_init_array+0x1e>
 80079c8:	08007a58 	.word	0x08007a58
 80079cc:	08007a58 	.word	0x08007a58
 80079d0:	08007a58 	.word	0x08007a58
 80079d4:	08007a5c 	.word	0x08007a5c

080079d8 <_init>:
 80079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079da:	bf00      	nop
 80079dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079de:	bc08      	pop	{r3}
 80079e0:	469e      	mov	lr, r3
 80079e2:	4770      	bx	lr

080079e4 <_fini>:
 80079e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e6:	bf00      	nop
 80079e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ea:	bc08      	pop	{r3}
 80079ec:	469e      	mov	lr, r3
 80079ee:	4770      	bx	lr
